<?xml version="1.0"?><feed xmlns:idx="urn:atom-extension:indexing" xmlns:media="http://search.yahoo.com/mrss/" xmlns:gr="http://www.google.com/schemas/reader/atom/" xmlns="http://www.w3.org/2005/Atom" idx:index="no" gr:dir="ltr"><!--
Content-type: Preventing XSRF in IE.

--><generator uri="http://www.google.com/reader">Google Reader</generator><id>tag:google.com,2005:reader/user/05185BEEF/label/Dev | Ruby</id><title>"Dev | Ruby" via RSC in Google Reader</title><gr:continuation>CM-VoI7iw6YC</gr:continuation><link rel="self" href="http://www.google.com/reader/atom/user%2F05185BEEF%2Flabel%2FDev%20%7C%20Ruby?client=greader.rb-test"/><author><name>RSC</name></author><updated>2011-03-17T22:10:50Z</updated><entry gr:crawl-timestamp-msec="1300399850673"><id gr:original-id="http://antirez.com/post/228">tag:google.com,2005:reader/item/7d0db5cc245f5616</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><title type="html">Github reviews as a way to improve code quality?</title><published>2011-03-17T22:04:09Z</published><updated>2011-03-17T22:04:09Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/XYDicZ1Uf0A/github-review-to-improve-code.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;Today I tweeted quite a bit about Ruby software quality.
The trigger was simply a Ruby/Sinatra application I run for personal use that crashed from time to time due to a GC bug in the Ruby interpreter I was using (the default of a recent Ubuntu install, sadly).
&lt;br&gt;&lt;br&gt;

This is an interpreter bug, and I hope it is a rare one, but this episode made me thinking about how many bad stories I accumulated since my preferred high level programming language is Ruby: bad documented gems, not working gems, dependencies hell, hard to install things, bad performances, and so forth.
&lt;br&gt;&lt;br&gt;

The test culture of Ruby helps a bit, but if you are an experienced software developer you know how a few tests can&amp;#39;t guarantee software quality. Honestly I saw testing as part of the problem from time to time, with the attitude &amp;quot;if it passes tests it can be merged&amp;quot;. Testing is useful but not so powerful, unfortunately.
&lt;br&gt;&lt;br&gt;

There is also a lot of great and documented code, but in general it seems to me that there is a real problem about code quality, and maybe there is something that github.com can do to improve the state of things: to make users aware that some code may not be perfect, and to make the developers aware, too.
&lt;br&gt;&lt;br&gt;

It is as simple as this: &lt;b&gt;github, please make us able to rate projects&lt;/b&gt;. If project-wide reviews are too bold or may appear too rude, just do it the old way, with &amp;quot;stars&amp;quot;. If users could rate:
&lt;br&gt;&lt;br&gt;

&lt;ul&gt;&lt;li&gt;usability / installation&lt;/li&gt;

&lt;li&gt;documentation&lt;/li&gt;

&lt;li&gt;code quality&lt;/li&gt;

&lt;li&gt;stability&lt;/li&gt;

&lt;li&gt;performances&lt;/li&gt;

&lt;/ul&gt;
&lt;br&gt;&lt;br&gt;

All this anonymously (you could be surprised about how much people in a given community are connected, coworkers, and in general not willing to say the truth about your project).
&lt;br&gt;&lt;br&gt;

with a vote between 1 and 5 starts, this may help a lot of people to make an initial idea about the quality of a project. The developer can gain very important info about what could be improved, that is a very valuable information, as there are a lot of people that are ready to say your project is cool, but constructive criticism about what is the weak side of the project is hard to obtain.
&lt;br&gt;&lt;br&gt;

This could be done as a separated web service using the github API, but what's the point in doing this? Having it integrated into github is much better of course. But if github will think that it's not a great match for the site, it can be an interesting week end project to work on.
&lt;br&gt;&lt;br&gt;

Please leave comments on &lt;a href="http://news.ycombinator.com/item?id=2338351"&gt;HN&lt;/a&gt; instead of using the blog comments.
&lt;br&gt;&lt;br&gt;

&lt;b&gt;Edit:&lt;/b&gt; Arguments from discussions on twitter / comments:
&lt;ul&gt;&lt;li&gt;How to prevent spam? The only hope I've is that the OSS programming community is less interested into producing some spam vote. But you can restrict the vote to followers of a project or to use other tricks, like allowing to vote only if the user is trusted enough by a given number of parameters.&lt;/li&gt;

&lt;li&gt;Using number of followers of a project as a meter? I think does not work, I'll follow a project that's not very good if I need it, and there are little or not better alternatives. Also I may love a project that is badly documented, so I'll provide five stars for everything but for doc.&lt;/li&gt;

&lt;/ul&gt;
&lt;b&gt;Edit2:&lt;/b&gt;
&lt;ul&gt;&lt;li&gt;What about the project getting better with time, or the the other way around? Just provide a lot more weight in the average computation to recent reviews. Also put the old ones into the mix but with some math rule so that, the older, the less relevant in the weighted sum.&lt;/li&gt;

&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 7368 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 7368.0 visits/day)&lt;/div&gt;Posted at 22:04:09 &lt;a href="http://antirez.com/post/github-review-to-improve-code.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/github-review-to-improve-code.html"&gt;11 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=228"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=Github+reviews+as+a+way+to+improve+code+quality%3F&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fgithub-review-to-improve-code.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/github-review-to-improve-code.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/XYDicZ1Uf0A" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>16026351131770821930</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1300227882627"><id gr:original-id="http://www.rubyinside.com/?p=4524">tag:google.com,2005:reader/item/f338b90c09555935</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="JRuby" scheme="http://www.rubyinside.com"/><category term="News" scheme="http://www.rubyinside.com"/><title type="html">JRuby 1.6 Released: Ruby 1.9.2 Support and More</title><published>2011-03-15T22:24:33Z</published><updated>2011-03-16T09:51:46Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/UE9Zjkgme2k/jruby-1-6-released-ruby-1-9-2-support-and-more-4524.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/jruby-1-6-released-ruby-1-9-2-support-and-more-4524.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/jruby-1-6-released-ruby-1-9-2-support-and-more-4524.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/jruby-1-6-released-ruby-1-9-2-support-and-more-4524.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/03/jruby16.gif" alt="" title="jruby16" width="100" height="100" style="float:left;margin-right:18px;border:1px solid #666"&gt;It's a newsflash! &lt;strong&gt;&lt;a href="http://jruby.org/2011/03/15/jruby-1-6-0.html"&gt;JRuby 1.6.0 has been released&lt;/a&gt; today.&lt;/strong&gt; Congratulations to the &lt;a href="http://jruby.org/"&gt;JRuby&lt;/a&gt; team. 1.6 is a significant and much awaited release and comes after a 9 month push of over 2500 commits.&lt;/p&gt;
&lt;p&gt;Hit up &lt;a href="http://jruby.org/2011/03/15/jruby-1-6-0.html"&gt;the official release post&lt;/a&gt; for the full run-through but here are some of the highlights of the release:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows has been added to the JRuby team's continuous integration system meaning that Windows support is only going to get better&lt;/li&gt;
&lt;li&gt;Ruby 1.9.2 language and API support (with the exception of &lt;code&gt;Encoding::Converter&lt;/code&gt; and &lt;code&gt;ripper&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Built in profiler&lt;/li&gt;
&lt;li&gt;General performance improvements&lt;/li&gt;
&lt;li&gt;Experimental support for C extensions (with provisos)&lt;/li&gt;
&lt;li&gt;RSpec is no longer included (worth mentioning in case it catches you out..)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can &lt;a href="http://www.jruby.org/download"&gt;download binary and source releases&lt;/a&gt; direct from JRuby.org if you want to get up to date or update &lt;a href="http://rvm.beginrescueend.com/"&gt;RVM&lt;/a&gt; with &lt;code&gt;rvm get head&lt;/code&gt; and &lt;code&gt;rvm reload&lt;/code&gt; before running &lt;code&gt;rvm install jruby-1.6.0&lt;/code&gt; :-)&lt;/p&gt;
&lt;p&gt;Fingers crossed for some great JRuby tutorials and guides coming along in the next couple of months.&lt;/p&gt;
&lt;p style="padding:8px;background-color:#ff9"&gt;&lt;em&gt;[me!]&lt;/em&gt; My &lt;a href="http://rubyweekly.com/"&gt;Ruby Weekly&lt;/a&gt; e-mail newsletter is 7 months old and going great! For the best Ruby news of the week, check it out. However, you might also like &lt;a href="http://javascriptweekly.com/"&gt;JavaScript Weekly&lt;/a&gt;, a newer newsletter of mine dedicated to.. yep, JavaScript, node.js, CoffeeScript, etc. ;-)&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=UE9Zjkgme2k:KR2QfVz96Iw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=UE9Zjkgme2k:KR2QfVz96Iw:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=UE9Zjkgme2k:KR2QfVz96Iw:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/UE9Zjkgme2k" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>12081574251590846293</gr:likingUser><gr:likingUser>07870146926958072805</gr:likingUser><gr:likingUser>15638623306692727372</gr:likingUser><gr:likingUser>08962340293270249083</gr:likingUser><gr:likingUser>13668608591451703896</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>18221903143069502680</gr:likingUser><gr:likingUser>12452693818628215717</gr:likingUser><gr:likingUser>03709139029688570344</gr:likingUser><gr:likingUser>05314763687120854629</gr:likingUser><gr:likingUser>08353054291962603524</gr:likingUser><gr:likingUser>01640370281238264014</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1300123566363"><id gr:original-id="http://www.rubyinside.com/?p=4468">tag:google.com,2005:reader/item/ddb6985d740a7eb7</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="Miscellaneous" scheme="http://www.rubyinside.com"/><title type="html">A Review of “The RSpec Book” by David Chelimsky</title><published>2011-03-14T17:25:08Z</published><updated>2011-03-14T19:24:27Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/4axnXaaSX7Y/a-review-of-the-rspec-book-by-david-chelimsky-4468.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/a-review-of-the-rspec-book-by-david-chelimsky-4468.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/a-review-of-the-rspec-book-by-david-chelimsky-4468.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/a-review-of-the-rspec-book-by-david-chelimsky-4468.html" xml:lang="en" type="html">&lt;p&gt;&lt;a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=rubins-20"&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/03/the-rspec-book.gif" alt="" title="the-rspec-book" width="230" height="273" style="float:right;margin-left:18px;border:1px solid #666"&gt;&lt;/a&gt; &lt;strong&gt;&lt;a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=rubins-20"&gt;The RSpec Book&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(Amazon.com)&lt;/em&gt; by &lt;strong&gt;David Chelimsky&lt;/strong&gt; (plus a cadre of BDD superstars) is a recent release from &lt;a href="http://pragprog.com/"&gt;The Pragmatic Programmers&lt;/a&gt; and a handy addition to any TDD-mad or RSpec-using developer's bookshelf. You can buy a copy &lt;a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=rubins-20"&gt;from Amazon.com&lt;/a&gt;, &lt;a href="http://www.amazon.co.uk/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=boogsweblog-21"&gt;Amazon.co.uk&lt;/a&gt;, or &lt;a href="http://www.pragprog.com/titles/achbd/the-rspec-book"&gt;direct from the publisher&lt;/a&gt; (more expensive but a PDF version is available).&lt;/p&gt;
&lt;h3&gt;What is &lt;em&gt;The RSpec Book&lt;/em&gt;?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;The RSpec Book&lt;/em&gt; is a 400 page book by David Chelimsky (&lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt;'s primary maintainer), Dave Astels, Zach Dennis, Aslak Hellesøy (of &lt;a href="http://cukes.info/"&gt;Cucumber&lt;/a&gt; fame), Bryan Helmkamp and Dan North. &lt;strong&gt;Its aim is to teach you all about RSpec &lt;em&gt;(RSpec 2.0 - specifically)&lt;/em&gt; and BDD (Behavior Driven Development) from the ground up&lt;/strong&gt; and it promises to "help you write better code, write better tests, and delver better software to your users."&lt;/p&gt;
&lt;p&gt;Robert C. Martin (a.k.a. &lt;em&gt;Uncle Bob&lt;/em&gt;) kicks off the book with a foreword that warns us of what's to come. He says that the book is a &lt;em&gt;trap&lt;/em&gt; and isn't really about RSpec. I won't spoil the whole surprise of his delivery but his general point is that the book is focused on teaching you software &lt;em&gt;craftsmanship&lt;/em&gt; using BDD (and testing in general) as the framework for putting together well-crafted software. This point is significant because &lt;em&gt;The RSpec Book&lt;/em&gt; focuses on the &lt;em&gt;concepts&lt;/em&gt; of BDD just as much as it does on the technicalities of RSpec itself.&lt;/p&gt;
&lt;h3&gt;A Book of Five Parts&lt;/h3&gt;
&lt;p&gt;The book starts with an extensive &lt;strong&gt;&lt;em&gt;Getting Started&lt;/em&gt;&lt;/strong&gt; section headed by a quick chapter summarizing RSpec and Cucumber before moving on to a suite of walkthrough-style chapters dedicated to building a 'code breaker' game. &lt;em&gt;Acceptance Test-Driven Planning&lt;/em&gt; is used which essentially means the acceptance tests are written &lt;em&gt;first&lt;/em&gt; in the form of Cucumber features so for two chapters you don't get to see any RSpec at all. Once RSpec comes into the mix, though, things move quickly and mocks (doubles) and stubs are introduced quickly. The 'code breaker' game work then continues for a couple of chapters with a brief detour into refactoring.&lt;/p&gt;
&lt;p&gt;The second section of the book - &lt;strong&gt;&lt;em&gt;Behavior Driven Development&lt;/em&gt;&lt;/strong&gt; - is made up of two code-free chapters that look at BDD from a higher level. A lot of this portion is quite opinionated but if you want to get an overall feel for the BDD process and how different concepts interlock with it, it's a great primer.&lt;/p&gt;
&lt;p&gt;The third section of the book - &lt;strong&gt;&lt;em&gt;RSpec&lt;/em&gt;&lt;/strong&gt; - proved to be the real "meat" for me. There are several chapters digging solely into the ins and outs of RSpec 2.0 itself. You learn how to use RSpec from the basics up, working through matchers, best practices, mocks, macros, custom formatters, custom matchers, and how the RSpec toolkit can integrate with other tools (such as TextMate). You basically get a 102 page guide to RSpec 2.0 here and that might be worth the price of admission alone.&lt;/p&gt;
&lt;p&gt;Sections dedicated to &lt;strong&gt;&lt;em&gt;Cucumber&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Rails&lt;/em&gt;&lt;/strong&gt; follow on to close the book. I found the Rails section particularly useful having not previously gotten on to the RSpec 2 bandwagon with Rails 3. There are several chapters that each walk through a particular topic, like view specs, controller specs, and model specs. I didn't want to digest the entire set at once and the structure helped me just dig into the parts I was immediately interested in without following each chapter in order. The large number of short and sweet code examples also helps if you're just scanning through looking for some guidance.&lt;/p&gt;
&lt;p&gt;Given the significance of &lt;em&gt;The RSpec Book&lt;/em&gt; and its time already spent out "in the wild" I asked my Twitter followers for some second opinions to round things off:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/03/tw1.png" alt="" title="tw1" width="638" height="140"&gt;&lt;br&gt;
&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/03/tw2.png" alt="" title="tw2" width="634" height="137"&gt;&lt;br&gt;
&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/03/tw3.png" alt="" title="tw3" width="636" height="140"&gt;&lt;/p&gt;
&lt;p&gt;In short, I recommend &lt;em&gt;The RSpec Book.&lt;/em&gt; The &lt;a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=rubins-20"&gt;reviews on Amazon&lt;/a&gt; seem to be rather mixed so you might want to check them out to get the bigger picture, but I've found the book to be rather useful with its direct narrative style, logical structure, and vast number of short code examples from which to descry some handy techniques.&lt;/p&gt;
&lt;h3&gt;Who Should Buy It?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rubyists who want to get up to speed with RSpec 2.0 and, to a lesser extent, Cucumber&lt;/li&gt;
&lt;li&gt;Rails 3.0 developers who want to learn how to do model, controller, view and integration testing with RSpec 2.0&lt;/li&gt;
&lt;li&gt;Anyone with a high-level interest in BDD, even if they're not Ruby developers.&lt;/li&gt;
&lt;li&gt;Anyone who thinks a small press like &lt;em&gt;The Pragmatic Programmers&lt;/em&gt; is worth supporting (yes!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Who Shouldn't Buy It?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Anyone expecting a wide overview of TDD and BDD toolsets and libraries. For example, I didn't find any references to Capybara, though Webrat is mentioned.&lt;/li&gt;
&lt;li&gt;Any existing BDD, RSpec 2 and Cucumber gurus.&lt;/li&gt;
&lt;li&gt;Die-hard Test::Unit users.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Chapters&lt;/h3&gt;
&lt;p&gt;Here's an overview of the Table of Contents to give you a feel for what's covered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Getting Started with RSpec and Cucumber
&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Hello (and Installation)&lt;/li&gt;
&lt;li&gt;Describing Features&lt;/li&gt;
&lt;li&gt;Automating Features with Cucumber&lt;/li&gt;
&lt;li&gt;Describing Code with RSpec&lt;/li&gt;
&lt;li&gt;Adding New Features&lt;/li&gt;
&lt;li&gt;Specifying an Algorithm&lt;/li&gt;
&lt;li&gt;Refactoring with Confidence&lt;/li&gt;
&lt;li&gt;Feeding Back What We’ve Learned&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Behaviour-Driven Development
&lt;ul&gt;
&lt;li&gt;The Case for BDD&lt;/li&gt;
&lt;li&gt;Writing Software That Matters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;RSpec
&lt;ul&gt;
&lt;li&gt;Code Examples&lt;/li&gt;
&lt;li&gt;RSpec::Expectations&lt;/li&gt;
&lt;li&gt;RSpec::Mocks&lt;/li&gt;
&lt;li&gt;Tools And Integration&lt;/li&gt;
&lt;li&gt;Extending RSpec&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cucumber
&lt;ul&gt;
&lt;li&gt;Intro to Cucumber&lt;/li&gt;
&lt;li&gt;Cucumber Detail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Behaviour-Driven Rails
&lt;ul&gt;
&lt;li&gt;BDD in Rails&lt;/li&gt;
&lt;li&gt;Cucumber with Rails&lt;/li&gt;
&lt;li&gt;Simulating the Browser with Webrat&lt;/li&gt;
&lt;li&gt;Automating the Browser with Webrat and Selenium&lt;/li&gt;
&lt;li&gt;Rails Views&lt;/li&gt;
&lt;li&gt;Rails Controllers&lt;/li&gt;
&lt;li&gt;Rails Models&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to Get &lt;em&gt;The RSpec Book&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;If you want a print copy (no Kindle - sorry!), head to &lt;a href="http://www.amazon.com/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=rubins-20"&gt;Amazon.com&lt;/a&gt;, &lt;a href="http://www.amazon.co.uk/RSpec-Book-Behaviour-Development-Cucumber/dp/1934356379/?tag=boogsweblog-21"&gt;Amazon.co.uk&lt;/a&gt;, or your other favorite book retailer. If a PDF, EPUB or Mobi (Kindle) file is more to your taste, &lt;a href="http://www.pragprog.com/titles/achbd/the-rspec-book"&gt;the publisher&lt;/a&gt; has those for sale directly - super dooplebloops!&lt;/p&gt;
&lt;p style="padding:8px;background-color:#ff9"&gt;&lt;em&gt;[ad]&lt;/em&gt; &lt;a href="http://engine.adzerk.net/redirect/0/3179/3005/1313/3784b5abc6554c0d8e4a05abd6b7472a/19/24/3543/634356797303506203"&gt;Red Dirt RubyConf&lt;/a&gt; is a hip and happening Ruby conference taking place in Oklahoma City on April 21-22, 2011. Speakers include Aaron 'tenderlove' Patterson, Wayne Seguin, Jeremy McAnally, and Dr Nic Williams (and &lt;a href="http://reddirtrubyconf.com/schedule"&gt;MANY more&lt;/a&gt; great folks).&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=4axnXaaSX7Y:ENyIXlhKdqw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=4axnXaaSX7Y:ENyIXlhKdqw:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=4axnXaaSX7Y:ENyIXlhKdqw:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/4axnXaaSX7Y" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>08962340293270249083</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>07627850390712298043</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298989876327"><id gr:original-id="http://antirez.com/post/227">tag:google.com,2005:reader/item/b3bf555a13520ef2</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><title type="html">Redis Manifesto</title><published>2011-03-01T14:16:05Z</published><updated>2011-03-01T14:16:05Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/s5SFfrptDok/redis-manifesto.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;Many times I don't know what to exactly reply to feature requests, or questions about why things in Redis are done in a specific way. Most of the time the questions make a lot of sense, there is not just a way to make things in programming, a lot is about your taste, feeling, and ideas about how software should be written. So I tried to condense my feelings about Redis and software development in general in this short manifest, that I'll include in the Redis distribution. There are an infinite number of ways of doing things, this is just the one I and a good part of the Redis community like.
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;Redis Manifesto&lt;/h3&gt;
&lt;ul&gt;&lt;li&gt;1 - A DSL for Abstract Data Types. Redis is a DSL (Domain Specific Language) that manipulates abstract data types and implemented as a TCP daemon. Commands manipulate a key space where keys are binary-safe strings and values are different kinds of abstract data types. Every data type represents an abstract version of a fundamental data structure. For instance Redis Lists are an abstract representation of linked lists. In Redis, the essence of a data type isn't just the kind of operations that the data types support, but also the space and time complexity of the data type and the operations performed upon it.&lt;/li&gt;

&lt;li&gt;2 - Memory storage is #1. The Redis data set, composed of defined key-value pairs, is primarily stored in the computer's memory. The amount of memory in all kinds of computers, including entry-level servers, is increasing significantly each year. Memory is fast, and allows Redis to have very predictable performance.  Datasets composed of 10k or 40 millions keys will perform similarly.  Complex data types like Redis Sorted Sets are easy to implement and manipulate in memory with good performance, making Redis very simple.  Redis will continue to explore alternative options (where data can be optionally stored on disk, say) but the main goal of the project remains the development of an in-memory database.&lt;/li&gt;

&lt;li&gt;3 - Fundamental data structures for a fundamental API. The Redis API is a direct consequence of fundamental data structures. APIs can often be arbitrary but not an API that resembles the nature of fundamental data structures. If we ever meet intelligent life forms from another part of the universe, they'll likely know, understand and recognize the same basic data structures we have in our computer science books. Redis will avoid intermediate layers in API, so that the complexity is obvious and more complex operations can be performed as the sum of the basic operations.&lt;/li&gt;

&lt;li&gt;4 - Code is like a poem; it&amp;#39;s not just something we write to reach some practical result.  Sometimes people that are far from the Redis philosophy suggest using other  code written by other authors (frequently in other languages) in order to implement something Redis currently lacks. But to us this is like if Shakespeare decided to end Enrico IV using the Paradiso from the Divina Commedia. Is using any external code a bad idea? Not at all. Like in &amp;quot;One Thousand and One Nights&amp;quot; smaller self contained stories are embedded in a bigger story, we&amp;#39;ll be happy to use beautiful self contained libraries when needed. At the same time, when writing the Redis story we&amp;#39;re trying to write smaller stories that will fit in to other code.&lt;/li&gt;

&lt;li&gt;5 - We're against complexity. We believe designing systems is a fight against complexity. We'll accept to fight the complexity when it's worthwhile but we'll try hard to recognize when a small feature is not worth 1000s of lines of code. Most of the time the best way to fight complexity is by not creating it at all.&lt;/li&gt;

&lt;li&gt;6 - Two levels of API. The Redis API has two levels: 1) a subset of the API fits naturally into a distributed version of Redis and 2) a more complex API that supports multi-key operations. Both are useful if used judiciously but there's no way to make the more complex multi-keys API distributed in an opaque way without violating our other principles. We don't want to provide the illusion of something that will work magically when actually it can't in all cases. Instead we'll provide commands to quickly migrate keys from one instance to another to perform multi-key operations and expose the tradeoffs to the user.&lt;/li&gt;

&lt;li&gt;7 - We optimize for joy. We believe writing code is a lot of hard work, and the only way it can be worth is by enjoying it.  When there is no longer joy in writing code, the best thing to do is stop. To prevent this, we'll avoid taking paths that will make Redis less of a joy to develop.&lt;/li&gt;

&lt;/ul&gt;
Thanks to Peter Cooper for reading the draft and helping to make it better.&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 23645 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 1372.3 visits/day)&lt;/div&gt;Posted at 14:16:05 &lt;a href="http://antirez.com/post/redis-manifesto.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/redis-manifesto.html"&gt;23 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=227"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=Redis+Manifesto&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fredis-manifesto.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/redis-manifesto.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/s5SFfrptDok" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>11986012805061343048</gr:likingUser><gr:likingUser>05068451015565066133</gr:likingUser><gr:likingUser>03544891211984531148</gr:likingUser><gr:likingUser>06244526826240331725</gr:likingUser><gr:likingUser>05275469297961036779</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><gr:likingUser>02714205789091616240</gr:likingUser><gr:likingUser>01002900068580443852</gr:likingUser><gr:likingUser>02800178579410032884</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298869132147"><id gr:original-id="http://www.rubyinside.com/?p=4450">tag:google.com,2005:reader/item/829a35be3c2e04f9</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="Miscellaneous" scheme="http://www.rubyinside.com"/><title type="html">16 Ruby and Rails Jobs for February 2011 (including UK and Australia)</title><published>2011-02-28T04:57:18Z</published><updated>2011-02-28T04:57:18Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/R3f_yH9lRbc/16-ruby-and-rails-jobs-for-february-2011-including-uk-and-australia-4450.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/16-ruby-and-rails-jobs-for-february-2011-including-uk-and-australia-4450.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/16-ruby-and-rails-jobs-for-february-2011-including-uk-and-australia-4450.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/16-ruby-and-rails-jobs-for-february-2011-including-uk-and-australia-4450.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/jobsjobspoobumwilly.jpg" alt="" title="jobsjobspoobumwilly" width="100" height="101" style="float:right;margin-left:18px;border:1px solid #555"&gt;It's been a killer month for new Ruby and Rails jobs over at the &lt;a href="http://jobs.rubyinside.com/"&gt;Ruby Inside Jobs board&lt;/a&gt; so I'm going to cut the filler to a minimum today.. though if you want to learn more about posting one of your own, &lt;a href="http://www.rubyinside.com/post-a-job"&gt;check our Post A Job page.&lt;/a&gt; The current bonus is you'll get your job ad into the 4000+ subscriber-strong &lt;a href="http://rubyweekly.com/"&gt;Ruby Weekly&lt;/a&gt; for free!&lt;/p&gt;
&lt;p&gt;There are a couple of really appealing jobs in here (particularly the first one) and they span the US with a few in the United Kingdom and one in Australia for good measure:&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Innovation Developer - &lt;/span&gt;San Francisco, California&lt;/h3&gt;
&lt;p&gt;salesforce.com, inc. is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/448192"&gt;looking for a Innovation Developer&lt;/a&gt; - the sort of developer who reads HN and TechCrunch, who&amp;#39;s played with tools like Raphael and CoffeeScript, and who wants to work on interesting prototypes with the latest tools. This sounds like a great position! It&amp;#39;s in downtown SF and you can even get a $100/mo fitness reimbursement — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/448192"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Great Ruby Developer Needed - &lt;/span&gt;London, UK&lt;/h3&gt;
&lt;p&gt;Econsultancy is an award-winning online publisher based in London and New York. They're &lt;a href="http://econsultancy.com/jobs/great-ruby-developer-2"&gt;looking for a developer&lt;/a&gt; to work at their London office with general experience of Ruby, Rails and Unix/Linux - salary is up to 60k — &lt;a href="http://econsultancy.com/jobs/great-ruby-developer-2"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby on Rails Developer - &lt;/span&gt;Pasadena, California&lt;/h3&gt;
&lt;p&gt;Goldstar is a ticket and entertainment company &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421372"&gt;looking for a full-time Rails developer&lt;/a&gt; to join a geographically-dispersed, test-happy, and pair-friendly team of developers building services for 1.2 million members across the US. This job does not demand you be based near Pasadena, CA (though that&amp;#39;s ideal) but at least one visit per year to HQ is required — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421372"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby/Rails Engineers - &lt;/span&gt;Edinburgh &amp;amp; Cambridge, UK&lt;/h3&gt;
&lt;p&gt;FreeAgent is a fast growing and hugely popular UK based startup obsessed with building fantastic online accounting software. They're a small team of smart people &lt;a href="http://www.freeagentcentral.com/company/jobs"&gt;looking to hire productive Ruby and Rails developers&lt;/a&gt; in Edinburgh or Cambridge. You&amp;#39;ll be working on adding and maintaining features for our existing applications and making sure their software scales up — &lt;a href="http://www.freeagentcentral.com/company/jobs"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby on Rails Developer - &lt;/span&gt;Boston, Massachusetts&lt;/h3&gt;
&lt;p&gt;The District Management Council is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421573"&gt;looking for an experienced Web developer&lt;/a&gt; with 2+ years of Rails and JavaScript experience plus MySQL, HTML, and CSS proficiency to work on their Web applications helping to dramatically improve public education in America today — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421573"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby/Java Web Developers - &lt;/span&gt;Arlington, Virginia&lt;/h3&gt;
&lt;p&gt;Healthcentral is an online health information site looking for, ideally, &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421583"&gt;a developer experienced with both Java and Ruby related technologies.&lt;/a&gt; A BS/MS in Computer Science is preferred, along with 2-4 years of industry experience preferably in startup environments — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/421583"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby Developer - &lt;/span&gt;Palo Alto, California&lt;/h3&gt;
&lt;p&gt;Wildfire Interactive is a rapidly expanding, VC-funded tech startup in the social media marketing space. They're using Rails and Sinatra and building many 'pure Ruby' components so &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/429666"&gt;they want Ruby developers with full-stack experience.&lt;/a&gt; Oh, and testing is a must — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/429666"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby Developer - &lt;/span&gt;Lewisville, Texas&lt;/h3&gt;
&lt;p&gt;Geoforce Inc provides asset visibility to the oil and gas industry through wireless devices feeding data to a Rails-powered SaaS app. They &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/429705"&gt;want a developer with 3 years of Rails experience&lt;/a&gt;, as well as Postgresql, HTML, and JavaScript experience generally — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/429705"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Graduate Rails Developer - &lt;/span&gt;London, UK&lt;/h3&gt;
&lt;p&gt;AlphaSights are &lt;a href="http://alphasights.com/graduate_rails_job"&gt;looking for a Computer Science graduate (or equivalent)&lt;/a&gt; with a passion for Ruby and Rails to work in a small team at their Covent Garden offices. No commercial Rails experience is necessary and a highly competitive salary is offered — &lt;a href="http://alphasights.com/graduate_rails_job"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Rails Developer - &lt;/span&gt;Cleveland, Ohio&lt;/h3&gt;
&lt;p&gt;Within3 is a professional networking site for the top institutions and physicians in the healthcare industry &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/430136"&gt;looking for a Rails developer.&lt;/a&gt; At least 3-5 years of Ruby experience is needed as well as thorough knowledge of front-end technologies (XHTML, CSS, JavaScript) — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/430136"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Senior Ruby (Rails/Sinatra) Developer - &lt;/span&gt;Santa Monica, California&lt;/h3&gt;
&lt;p&gt;TRUECar, Inc. is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/437410"&gt;looking for a Ruby developer with Sinatra experience&lt;/a&gt; to work on improving their car price research service. Your TDD and Agile-fu needs to be strong. A highly competitive salary, 100% medical, and equity are offered — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/437410"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Sr. Ruby Developer - &lt;/span&gt;Coronado, California&lt;/h3&gt;
&lt;p&gt;StockTwits &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/439720"&gt;wants a senior-level Ruby developer&lt;/a&gt; with Ruby, Rails (with HAML), TDD and HTML5 experience. A Bachelor&amp;#39;s degree or better in Computer Science or a related technical discipline is required — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/439720"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby on Rails Developer - &lt;/span&gt;Chicago, Illinois&lt;/h3&gt;
&lt;p&gt;Obtiva is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/442820"&gt;looking for developers&lt;/a&gt; for its Chicago and Denver locations - no &amp;#39;rock stars&amp;#39; or &amp;#39;ninjas&amp;#39; but passionate, friendly team players with Ruby, Rails, and Agile experience — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/442820"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Web Developer - &lt;/span&gt;San Francisco, California&lt;/h3&gt;
&lt;p&gt;Do you have a passion for design as well as code? &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444317"&gt;Hybrid Design wants you!&lt;/a&gt; They&amp;#39;re working for clients like Apple, Nike, and TED and need a full-time Web developer with both Ruby and design chops — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444317"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby Developer - &lt;/span&gt;Evanston, Illinois&lt;/h3&gt;
&lt;p&gt;Celect builds member-management systems for organizations like churches and fraternities. They &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444473"&gt;need a full-time Ruby developer&lt;/a&gt; for their engineering team who has experience with RSpec, Passenger, and PostgreSQL. The job is on-site in Evanston, IL  — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444473"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby on Rails Software Engineer - &lt;/span&gt;Sterling, Virginia&lt;/h3&gt;
&lt;p&gt;Grab Networks is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444676"&gt;looking for analytical individuals with strong computational skills&lt;/a&gt; to work on multiple levels of a complex technology stack. You&amp;#39;ll need 5-6 years&amp;#39; experience developing dynamic, data-driven, commercial web applications — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/444676"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby/JRuby Tools Engineer - &lt;/span&gt;San Mateo, California&lt;/h3&gt;
&lt;p&gt;Where can you work on challenging engineering problems while saving the planet? At eMeter! &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/447029"&gt;eMeter is seeking an Java/Ruby/JRuby Automation/Tools Engineer&lt;/a&gt; to drive the development of automation tools — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/447029"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby Developer - &lt;/span&gt;Melbourne, Australia&lt;/h3&gt;
&lt;p&gt;TrikeApps is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/450042"&gt;looking for a Ruby Developer&lt;/a&gt; to work in their Melbourne, Australia office. Assistance with relocation and visa sponsorship is available for the right candidate wanting to move to Australia. Two years of experience developing webapps is required — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/450042"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span style="color:#999"&gt;Ruby on Rails Software Engineer - &lt;/span&gt;San Francisco, California&lt;/h3&gt;
&lt;p&gt;AKQA (one of the world's most influential creative and technology companies) is &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/453798"&gt;looking for a Ruby on Rails Software Engineer&lt;/a&gt; with 3 years&amp;#39; experience of Rails and familiarity with Unix/Linux — &lt;a href="http://jobs.rubyinside.com/a/jbb/job-details/453798"&gt;click here to learn more.&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=R3f_yH9lRbc:fWZd9A7Ejqc:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=R3f_yH9lRbc:fWZd9A7Ejqc:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=R3f_yH9lRbc:fWZd9A7Ejqc:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/R3f_yH9lRbc" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>08367584023452666416</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298780661449"><id gr:original-id="http://www.rubyinside.com/?p=4432">tag:google.com,2005:reader/item/1025caaadfbe5397</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="Miscellaneous" scheme="http://www.rubyinside.com"/><title type="html">A Review of “Eloquent Ruby” by Russ Olsen – It Rocks!</title><published>2011-02-27T04:23:40Z</published><updated>2011-03-14T16:30:20Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/NDAVVkLCFsI/a-review-of-eloquent-ruby-by-russ-olsen-it-rocks-4432.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/a-review-of-eloquent-ruby-by-russ-olsen-it-rocks-4432.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/a-review-of-eloquent-ruby-by-russ-olsen-it-rocks-4432.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/a-review-of-eloquent-ruby-by-russ-olsen-it-rocks-4432.html" xml:lang="en" type="html">&lt;p&gt;&lt;a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=rubins-20"&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/eloquent-ruby-229x300.jpg" alt="" title="eloquent-ruby" width="229" height="300" style="float:right;margin-left:18px;border:1px solid #666"&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=rubins-20"&gt;Eloquent Ruby&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(Amazon.com - print &amp;amp; Kindle)&lt;/em&gt; &lt;strong&gt;by Russ Olsen is the first Ruby book I've read &lt;em&gt;in its entirety&lt;/em&gt; within 24 hours; it's that good.&lt;/strong&gt; That may be all you need to know before you &lt;a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=rubins-20"&gt;buy a copy at Amazon.com&lt;/a&gt;, &lt;a href="http://www.amazon.co.uk/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=boogsweblog-21"&gt;Amazon.co.uk&lt;/a&gt; or read it &lt;a href="http://my.safaribooksonline.com/book/web-development/ruby/9780321700308"&gt;on Safari&lt;/a&gt; (if you have an account). If you want to learn more though, keep reading.&lt;/p&gt;
&lt;h3&gt;What Is "Eloquent Ruby"?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Eloquent Ruby&lt;/em&gt; is a book published by Addison Wesley and written by Russ Olsen (who also wrote &lt;a href="http://www.rubyinside.com/design-patterns-in-ruby-by-russ-olsen-695.html"&gt;Design Patterns in Ruby&lt;/a&gt; a few years ago). It clocks in at around 400 pages and has 31 chapters clocking in at around a punchy 10 pages each. Each chapter is titled as a guideline you should follow to write "eloquent" Ruby - things like &lt;em&gt;Create Classes That Understand Equality&lt;/em&gt; and &lt;em&gt;Write Code That Looks Like Ruby&lt;/em&gt; - and typically the claim is explained, some code examples shown and discussed, some real world examples pointed to, and that's it.&lt;/p&gt;
&lt;p&gt;As with &lt;em&gt;Design Patterns in Ruby&lt;/em&gt;, Russ adopts a chatty, familiar tone. Reading this book is like reading a book specifically written for you by a friend. He doesn't shoot off on many unnecessary tangents and he keeps the stories short and sweet but this book certainly couldn't be called &lt;em&gt;dry&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The book is also notably short of egregious errors or omissions. Even when I don't read something with a fine-toothed comb on standby, I can usually pick out a laundry list of factual and grammatical errors or omissions (as both Obie Fernandez and my wife will attest) but &lt;em&gt;Eloquent Ruby&lt;/em&gt; gave me little to chew on. I can only bring to mind a few spacing and formatting issues and only one true "error": a &lt;code&gt;&amp;gt;&lt;/code&gt; instead of a &lt;code&gt;&amp;lt;&lt;/code&gt; in a class definition on a single example.&lt;/p&gt;
&lt;p&gt;Russ tries to remain neutral with his choice of Ruby implementations but the book seems to focus primarily on Ruby 1.9 (Ruby 1.9.1 specifically but that's just due to when he wrote it)  while providing useful footnotes in the cases where there are differences to Ruby 1.8. No matter what Ruby implementation you're using, there's little to confuse you as most of it is very non-implementation and non-version specific.&lt;/p&gt;
&lt;p&gt;I wholeheartedly recommend this book to anyone except those who, well, could have written a similar book themselves. The short punchy chapters make it a delight to read and gives the option of reading it merely 10 minutes at a time before bed or similar. The short chapters also make it useful as a reference if you forget how to do a certain thing like, say, use &lt;em&gt;method_missing&lt;/em&gt;, even though it's not put together as a reference book at all. Lastly, this book is a &lt;em&gt;must read&lt;/em&gt; if you're not confident with Ruby idioms and the best way to structure and lay out your code - Russ's approaches reinforce the current "standard" way to write Ruby and this alone is worth the price of admission.&lt;/p&gt;
&lt;h3&gt;Who Should Buy It?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Any Ruby developer who doesn't yet feel like they're at guru level (that's most of us!)&lt;/li&gt;
&lt;li&gt;Anyone who wants to get a feel for the typically undocumented style, syntax, and structural standards of top Ruby developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Who Shouldn't Buy It?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Anyone without a sense of humor or who doesn't like a chatty, familiar type of writing.&lt;/li&gt;
&lt;li&gt;Matz, Dave Thomas, Chad Fowler, Russ Olsen himself, and a few others.&lt;/li&gt;
&lt;li&gt;Anyone who's resistant to change and wants to keep coding Ruby "their way."&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;The Chapters&lt;/h3&gt;
&lt;p&gt;The chapter titles in &lt;em&gt;Eloquent Ruby&lt;/em&gt; are useful enough to give you an indication of the level(s) it aims at and whether it would be interesting to you, so here goes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Write Code That Looks Like Ruby&lt;/li&gt;
&lt;li&gt;Choose The Right Control Structure&lt;/li&gt;
&lt;li&gt;Take Advantage Of Ruby's Smart Collections&lt;/li&gt;
&lt;li&gt;Take Advantage Of Ruby's Smart Strings&lt;/li&gt;
&lt;li&gt;Find The Right String With Regular Expressions&lt;/li&gt;
&lt;li&gt;Use Symbols To Stand For Something&lt;/li&gt;
&lt;li&gt;Treat Everything Like An Object - Because It Is&lt;/li&gt;
&lt;li&gt;Embrace Dynamic Typing&lt;/li&gt;
&lt;li&gt;Write Specs!&lt;/li&gt;
&lt;li&gt;Construct Your Classes From Short, Focused Methods&lt;/li&gt;
&lt;li&gt;Define Operators Respectfully&lt;/li&gt;
&lt;li&gt;Create Classes That Understand Equality&lt;/li&gt;
&lt;li&gt;Get The Behavior You Need With Singleton And Class Methods&lt;/li&gt;
&lt;li&gt;Use Class Instance Variables&lt;/li&gt;
&lt;li&gt;Use Modules As Name spaces&lt;/li&gt;
&lt;li&gt;Use Modules As Mixins&lt;/li&gt;
&lt;li&gt;Use Blocks To Iterate&lt;/li&gt;
&lt;li&gt;Execute Around With A Block&lt;/li&gt;
&lt;li&gt;Save Blocks To Execute Later&lt;/li&gt;
&lt;li&gt;Use Hooks To Keep Your Program Informed&lt;/li&gt;
&lt;li&gt;Use method_missing For Flexible Error Handling&lt;/li&gt;
&lt;li&gt;Use method_missing For Delegation&lt;/li&gt;
&lt;li&gt;Use method_missing To Build Flexible APIs&lt;/li&gt;
&lt;li&gt;Update Existing Classes With Monkey Patching&lt;/li&gt;
&lt;li&gt;Create Self Modifying Classes&lt;/li&gt;
&lt;li&gt;Create Classes That Modify Their Subclasses&lt;/li&gt;
&lt;li&gt;Invent Internal DSLs&lt;/li&gt;
&lt;li&gt;Build External DSLs For Flexible Syntax&lt;/li&gt;
&lt;li&gt;Package Your Programs As Gems&lt;/li&gt;
&lt;li&gt;Know Your Ruby Implementation&lt;/li&gt;
&lt;li&gt;Keep An Open Mind To Go With Those Open Classes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There's something for everyone and it gets progressively more advanced.&lt;/p&gt;
&lt;h3&gt;How to Get Eloquent Ruby&lt;/h3&gt;
&lt;p&gt;If you want a print or Kindle copy, head to &lt;a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=rubins-20"&gt;Amazon.com&lt;/a&gt;, &lt;a href="http://www.amazon.co.uk/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/?tag=boogsweblog-21"&gt;Amazon.co.uk&lt;/a&gt;, or your other favorite book retailer. If a PDF or EPUB file is more to your taste, &lt;a href="http://www.informit.com/store/product.aspx?isbn=0321768337"&gt;InformIT&lt;/a&gt; has those for sale (currently for $28.79).&lt;/p&gt;
&lt;h3&gt;Kindle Preview&lt;/h3&gt;
&lt;div&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=NDAVVkLCFsI:_P31bo7Ju6g:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=NDAVVkLCFsI:_P31bo7Ju6g:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=NDAVVkLCFsI:_P31bo7Ju6g:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/NDAVVkLCFsI" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>05332715160519219400</gr:likingUser><gr:likingUser>09885554720706931232</gr:likingUser><gr:likingUser>01585781993341433047</gr:likingUser><gr:likingUser>08962340293270249083</gr:likingUser><gr:likingUser>00469574939651249697</gr:likingUser><gr:likingUser>12129945746987380079</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>12175421065371833333</gr:likingUser><gr:likingUser>02312042911823059098</gr:likingUser><gr:likingUser>11496849258748853027</gr:likingUser><gr:likingUser>02582356324518336815</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><gr:likingUser>13399401669980563715</gr:likingUser><gr:likingUser>16216928680461065086</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298651474775"><id gr:original-id="http://antirez.com/post/226">tag:google.com,2005:reader/item/234a40b1dd553a79</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><title type="html">Redis Presharding</title><published>2011-02-25T16:16:37Z</published><updated>2011-02-25T16:16:37Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/hMt2BFuCsJc/redis-presharding.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;Redis cluster is currently under development, and we hope it will be able to solve the problem of partitioning data among different Redis instances in a transparent, fast, and fault tolerant way. The cluster project is currently not ready: even if we have a pretty clear design, and many networking level code for gossip and failure detection, it will take some more month to be released, and more time to be released into a stable release.
&lt;br&gt;&lt;br&gt;

While our work continue, people shard regardless of Redis cluster, using their own algorithms and systems. This post describes a strategy for partitioning your data among N instances that is very simple but that works great. We&amp;#39;ll call this strategy &amp;quot;Redis Presharding&amp;quot;.
&lt;h2&gt;Redis is lightweight&lt;/h2&gt;
Redis is a very small program, currently consisting of just 30k lines of code.
The only dependency is the libc. We use our libraries for everything, with just the minimal code and functionality needed to get the work done.
This provides us with a very neat advantage: our memory footprint for a spare instance is minimal. Every Redis instance running consumes little more than one megabyte of RAM. This means that having 32, 64, or 128 instances of Redis all running against the same Linux box does not pose any problem.
&lt;br&gt;&lt;br&gt;

This is very important for our use case. Let's see why.
&lt;br&gt;&lt;br&gt;

Simple partitioning algorithms are cool because they are, well, simple.
You get the key, hash it, and get K bits of the hash (or if you prefer
perform a modulo operation). So you can map every given key to
N different Redis nodes.
&lt;pre&gt;
Node = Hash(key) MOD N
&lt;/pre&gt;
The limit with this kind of partitioning is that once you need to add or remove nodes from the system to adjust the capacity, it is a real mess. Hashing is easy, rehashing is hard, and involves moving keys form instances to other instances while the system is running. If you tried to design a system like that, you know what I'm talking about. Redis cluster will be able to do things like that, and if you check the design you'll discover is more complex than Hash MOD N :)
&lt;br&gt;&lt;br&gt;

But wait, maybe we can mount a poor man's cluster. Since the Redis instances are so light to run, what about if we start considering we'll need a lot of capacity? So we start, from day zero, 128 different Redis Instances, using just two not too powerful virtual machines on EC2 (this is just an example, you can do your math to understand how much you want to grow before of changing design).
&lt;br&gt;&lt;br&gt;

Of course your 128 instances will use a small amount of memory each. It is important that you use this design with objects that are more or less all of the same size, and that your hash functions does not have trivial biases (in other words, use SHA1). If your application contains things like long lists or alike, you can use a specialized Redis instance for this data structures.
&lt;h2&gt;Handling many instances&lt;/h2&gt;
Handling 128 instances is not like handling a single one, so it is a good idea to write scripts to start all the instances, to stop all the instances, to collect all the .rdb or AOF files to create a single tar.gz with everything that you can use as a backup. It's a good idea to also have a script that takes this tar.gz as input and restore all the dumps into the different Redis instances.
&lt;br&gt;&lt;br&gt;

Also some monitoring will not hurt at all.
&lt;br&gt;&lt;br&gt;

Basically this set of tools could be a nice open source project, if done well, simply, and the spirit of Redis, and possibly coded in Ruby ;) Ok let's avoid language flame wars...
&lt;br&gt;&lt;br&gt;

The bottom line is: be prepared to handle hundred of instances.
&lt;br&gt;&lt;br&gt;

But running many instances also have some neat advantage.
For instance, do you want to rewrite the AOF file? Do this one instance after the other, and the memory hint will be small. The same applies to saving with the normal .rdb persistence.
&lt;br&gt;&lt;br&gt;

Also you are doing a very neat thing: you are working at scale from the start, even if you are still small. This means to be prepared to run a much larger site from day zero. Not a bad idea if you ask me.
&lt;h2&gt;Moving instances&lt;/h2&gt;
Now the interesting part is, I need to scale. My 128 instances are using all the memory and resources in my small virtual machines. What to do?
It is pretty easy, just fire a third virtual machine and move one third of your instances in this new machine.
&lt;br&gt;&lt;br&gt;

You can do this without any kind of down time, using a common trick:
&lt;ul&gt;&lt;li&gt;Start the spare Redis instances in the new virtual machine.&lt;/li&gt;

&lt;li&gt;Set this instances are replicas for the old instances you want to move.&lt;/li&gt;

&lt;li&gt;When the initial synchronization is done and all the slaves are working, change the configuration of your clients to use the new instances.&lt;/li&gt;

&lt;li&gt;Elect the new instances as masters with SLAVEOF NO ONE.&lt;/li&gt;

&lt;li&gt;Finally shut down all the old instances.&lt;/li&gt;

&lt;li&gt;Upgrade your shell scripts configs with the new IP/PORT info for every instance.&lt;/li&gt;

&lt;/ul&gt;
&lt;br&gt;&lt;br&gt;

This solution will ensure that the down time is zero as the slaves are able to accept writes, so once you change the configuration of your clients all the clients will start writing against the new instances. In a second the old instances will not get any new query at all, so the slaves can be elected to masters, and the old masters can be killed.
&lt;h2&gt;Hash tags&lt;/h2&gt;
With this schema, and with Redis Cluster itself, commands taking multiple keys as arguments are harder to use since if the two keys will hash to two different instances the operation can not be performed.
&lt;br&gt;&lt;br&gt;

Either do not use multi key operations but instead try to model this complex ops at application level, or use a technique called Hash Tags.
Basically if a key contains the {} characters, instead of hashing the whole string to obtain the instance ID, you just hash the string inside {}.
&lt;br&gt;&lt;br&gt;

So while the key &amp;quot;foo&amp;quot; will be hashed as SHA1(&amp;quot;foo&amp;quot;), the key &amp;quot;bar{zap}&amp;quot; will be hashed just as SHA1(&amp;quot;zap&amp;quot;).
&lt;br&gt;&lt;br&gt;

This way you can force keys to be stored in the same instance, so that if you want to perform intersections just against user data you can do it using hash tags that are different for every user, but the same for all the keys related to the same user. Sometimes this is enough, sometimes instead this is still not enough and you have application level help to model operations like intersections between sets in different instances, or to rethink your application logic at all.
&lt;h2&gt;Fault tolerance&lt;/h2&gt;
The described solution can be made fault tolerant using Redis replication.
Basically in our example instead of firing two virtual machines, you can instead fire four. Every instance is replicated in another instance in a different virtual machine (make sure they are in a different data center).
&lt;br&gt;&lt;br&gt;

If something goes bad with a virtual machine it is possible to point the clients to the other virtual machine, changing all the occurrences of the IP address in the configuration table with another one.
&lt;h2&gt;Conclusion&lt;/h2&gt;
A solution like Redis Cluster handling all this for you is obviously a better long term solution, but what was descried in this post is a simple way to work with what we have currently.
&lt;br&gt;&lt;br&gt;

If a set of scripts and small programs are developed to help in this kind of setups, including monitoring programs, tools to start and stop many instances, tools to perform backups and to restore all the .rdb or AOF files, it can be much simpler to setup a system like the one described here.&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 12991 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 614.3 visits/day)&lt;/div&gt;Posted at 16:16:37 &lt;a href="http://antirez.com/post/redis-presharding.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/redis-presharding.html"&gt;4 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=226"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=Redis+Presharding&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fredis-presharding.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/redis-presharding.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/hMt2BFuCsJc" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>01183224162277160914</gr:likingUser><gr:likingUser>17684677394670107977</gr:likingUser><gr:likingUser>12241215647954569484</gr:likingUser><gr:likingUser>02714205789091616240</gr:likingUser><gr:likingUser>01002900068580443852</gr:likingUser><gr:likingUser>08611726946949505648</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298524173597"><id gr:original-id="http://www.rubyinside.com/?p=4416">tag:google.com,2005:reader/item/16bf17fb9cd9e1a3</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="Miscellaneous" scheme="http://www.rubyinside.com"/><title type="html">Happy 18th Birthday, Ruby!</title><published>2011-02-24T05:09:24Z</published><updated>2011-02-24T06:14:37Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/TipduGbAvzk/happy-18th-birthday-ruby-4416.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/happy-18th-birthday-ruby-4416.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/happy-18th-birthday-ruby-4416.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/happy-18th-birthday-ruby-4416.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/ruby1.png" alt="" title="ruby" width="110" height="111" style="float:left;margin-right:18px;border:1px solid #666"&gt;Yes, I'm sad enough to have had this in my calendar for some time but.. it's Ruby's 18th "birthday" today! &lt;strong&gt;Happy Birthday Ruby!&lt;/strong&gt; While this means she can drink, vote, and otherwise join her slightly older friends Perl (24) and Python (21) in the nightclubs of Europe, I was surprised to learn that &lt;a href="http://en.wikipedia.org/wiki/Coming_of_Age_Day"&gt;coming of age in Japan is at 20 years old&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From Wikipedia's &lt;a href="http://en.wikipedia.org/wiki/Ruby_(programming_language)"&gt;Ruby entry&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The name "Ruby" was decided on during an online chat session between Matsumoto and Keiju Ishitsuka on February 24, 1993, before any code had been written for the language. Initially two names were proposed: "Coral" and "Ruby", with the latter being chosen by Matsumoto in a later email to Ishitsuka. Matsumoto has later stated that a factor in choosing the name "Ruby" was because it was the birthstone of one of his colleagues.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;cite&gt;Wikipedia&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;If you're interested in learning more, &lt;a href="http://linuxdevcenter.com/pub/a/linux/2001/11/29/ruby.html"&gt;this interview with Matz back in 2001&lt;/a&gt; will give you more history and background to the creation of Ruby.&lt;/p&gt;
&lt;p&gt;While Matz has said that February 24, 1993 is Ruby's "birthday" (back when &lt;em&gt;I Will Always Love You&lt;/em&gt; by Whitney Houston was topping the charts), the first public release wasn't until December 21, 1995 when Ruby 0.95 was released and the first mailing list established. Ruby 1.0 followed a year later on December 25, 1996, establishing the tradition of &lt;a href="http://www.rubyinside.com/the-ruby-communitys-christmas-releases-4118.html"&gt;Christmas Day Ruby releases.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's to 18 more, love.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;P.S. Before I get any grief for putting a picture of a young woman on this post — it&amp;#39;s happened before *sigh* — this actress played &lt;a href="http://en.wikipedia.org/wiki/Ruby_Allen"&gt;a character called Ruby&lt;/a&gt; in the UK's most popular soap opera and was about 18 at the time. Rock and roll.&lt;/small&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=TipduGbAvzk:IrzXQvUjHac:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=TipduGbAvzk:IrzXQvUjHac:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=TipduGbAvzk:IrzXQvUjHac:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/TipduGbAvzk" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>12050031834138523626</gr:likingUser><gr:likingUser>10452883752421848286</gr:likingUser><gr:likingUser>12129945746987380079</gr:likingUser><gr:likingUser>12608176320090135909</gr:likingUser><gr:likingUser>11132888979039710046</gr:likingUser><gr:likingUser>04561095782341368598</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>02312042911823059098</gr:likingUser><gr:likingUser>10344275679473139525</gr:likingUser><gr:likingUser>12733332058644857441</gr:likingUser><gr:likingUser>14258225022780889086</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298215301734"><id gr:original-id="http://www.rubyinside.com/?p=4336">tag:google.com,2005:reader/item/2f5ec66100459d38</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="Ruby on Rails" scheme="http://www.rubyinside.com"/><category term="Tutorials" scheme="http://www.rubyinside.com"/><title type="html">How To Get Rails 3 and RSpec 2 Running Specs Fast (From Scratch)</title><published>2011-02-20T15:20:22Z</published><updated>2011-02-27T02:42:38Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/9kQfKhEconY/how-to-rails-3-and-rspec-2-4336.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/how-to-rails-3-and-rspec-2-4336.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rarrr.png" alt="" title="rarrr" width="120" height="120" style="float:left;margin-right:16px;margin-bottom:8px;border:1px solid #555"&gt;&lt;a href="http://www.rubyinside.com/rails-3-0-released-and-22-free-videos-to-bring-you-up-to-speed-3733.html"&gt;Rails 3&lt;/a&gt; is great. &lt;a href="http://www.rubyinside.com/rspec-2-0-released-rubys-leading-bdd-framework-grows-up-3880.html"&gt;RSpec 2&lt;/a&gt; is great. And &lt;a href="http://www.rubyinside.com/ruby-1-9-2-released-3700.html"&gt;Ruby 1.9.2&lt;/a&gt; is &lt;em&gt;really&lt;/em&gt; great. Getting them all running together &lt;em&gt;and quickly&lt;/em&gt;, however, isn't entirely straightforward. In this post I demonstrate how to get everything ticking over along with automatically running, super-snappy test runs.&lt;/p&gt;
&lt;p&gt;The ultimate outcome is using Ruby 1.9.2 (though much of this is relevant to 1.8 still) to create a Rails 3 app, hook up RSpec 2, and be able to run specs &lt;em&gt;quickly.&lt;/em&gt; The first two parts are easy(ish) but the "quickly" part requires some tinkering. Grab a coffee and carry on..&lt;/p&gt;
&lt;h3&gt;Create a new Rails 3 app&lt;/h3&gt;
&lt;p&gt;Got Rails 3 installed? If not, &lt;code&gt;gem install rails&lt;/code&gt; will see you good. Then head on down to your favorite project folder with your shell and create a new Rails 3 app like so:&lt;/p&gt;
&lt;pre&gt;rails new myapp --skip-test-unit&lt;/pre&gt;
&lt;p&gt;You can retroactively bring RSpec 2 into an existing Rails 3 project, of course, but it's easier for this walkthrough to start afresh in case of application-specific issues.&lt;/p&gt;
&lt;h3&gt;Hooking up RSpec 2 with RSpec-Rails&lt;/h3&gt;
&lt;p&gt;Edit the &lt;code&gt;Gemfile&lt;/code&gt; file in your new Rails project (&lt;code&gt;myapp/Gemfile&lt;/code&gt; in this example) and add the following block to the bottom:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;:development&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;:test&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;gem&lt;/span&gt; &lt;span&gt;&amp;#39;rspec-rails&amp;#39;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This tells Bundler (a gem management and dependency tool Rails 3 likes to lean on) we want to use the &lt;a href="https://github.com/dchelimsky/rspec-rails"&gt;rspec-rails&lt;/a&gt; gem which will get RSpec running with Rails 3.0 for us. Next, we get Bundler to do its thing:&lt;/p&gt;
&lt;pre&gt;bundle&lt;/pre&gt;
&lt;p&gt;This will install all of the gems referenced in &lt;code&gt;Gemfile&lt;/code&gt;, including &lt;code&gt;rspec-rails&lt;/code&gt;. (You can use &lt;code&gt;bundle install&lt;/code&gt; instead, if you prefer, but &lt;code&gt;bundle&lt;/code&gt; on its own works too.)&lt;/p&gt;
&lt;p&gt;Last but not least, we need to run RSpec's 'generator' that rspec-rails has put in place for us:&lt;/p&gt;
&lt;pre&gt;rails generate rspec:install&lt;/pre&gt;
&lt;p&gt;The generator creates a few files. Namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.rspec&lt;/code&gt; - a config file where we can store extra command line options for the &lt;code&gt;rspec&lt;/code&gt; command line tool. By default it contains &lt;code&gt;--colour&lt;/code&gt; which turns on colored output from RSpec.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec&lt;/code&gt; - a directory that will store all of the various model, controller, view, acceptance and other specs for your app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spec/spec_helper.rb&lt;/code&gt; - a file that's loaded by every spec (not in any automatic way but most have &lt;code&gt;require 'spec_helper'&lt;/code&gt; at the top). It sets the test environment, contains app level RSpec configuration items, loads support files, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We still can't run &lt;code&gt;rake&lt;/code&gt; and see anything interesting yet because we don't have a database or any models initialized.&lt;/p&gt;
&lt;h3&gt;Creating a model to test&lt;/h3&gt;
&lt;p&gt;Let's take the easy way out and use the &lt;code&gt;scaffold&lt;/code&gt; generator to flesh out something for us to test (as well as to see what spec files can be generated automatically):&lt;/p&gt;
&lt;pre&gt;rails generate scaffold Person name:string age:integer zipcode:string&lt;/pre&gt;
&lt;p&gt;It's worth noting that when you generate the scaffold numerous spec files are also created (thanks to &lt;code&gt;rspec-rails&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;spec/models/person_spec.rb
spec/controllers/people_controller_spec.rb
spec/views/people/edit.html.erb_spec.rb
spec/views/people/index.html.erb_spec.rb
spec/views/people/new.html.erb_spec.rb
spec/views/people/show.html.erb_spec.rb
spec/helpers/people_helper_spec.rb
spec/routing/people_routing_spec.rb
spec/requests/people_spec.rb&lt;/pre&gt;
&lt;p&gt;Now bring the database up to speed with the migration for the new model:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rake db:migrate&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now let's run &lt;code&gt;rake&lt;/code&gt; - finally! The result:&lt;/p&gt;
&lt;pre&gt;...............**............

Pending:
  PeopleHelper add some examples to (or delete) /Users/peter/dev/rails/myapp/spec/helpers/people_helper_spec.rb
    # Not Yet Implemented
    # ./spec/helpers/people_helper_spec.rb:14
  Person add some examples to (or delete) /Users/peter/dev/rails/myapp/spec/models/person_spec.rb
    # Not Yet Implemented
    # ./spec/models/person_spec.rb:4

Finished in 0.31043 seconds
29 examples, 0 failures, 2 pending&lt;/pre&gt;
&lt;p&gt;Rock and roll. We're up and running. Sort of. Let's put in some "real" specs to be sure things are working nicely.&lt;/p&gt;
&lt;p&gt;Change &lt;code&gt;spec/models/person_spec.rb&lt;/code&gt; to the following rather contrived pair of specs:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;spec_helper&amp;#39;&lt;/span&gt;

&lt;span&gt;describe&lt;/span&gt; &lt;span&gt;Person&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;it&lt;/span&gt; &lt;span&gt;&amp;quot;can be instantiated&amp;quot;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
    &lt;span&gt;Person&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt; &lt;span&gt;be_an_instance_of&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;Person&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;end&lt;/span&gt;

  &lt;span&gt;it&lt;/span&gt; &lt;span&gt;&amp;quot;can be saved successfully&amp;quot;&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
    &lt;span&gt;Person&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;create&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;should&lt;/span&gt; &lt;span&gt;be_persisted&lt;/span&gt;
  &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Not the most useful things to spec out, admittedly, but you get a little database action and get rid of a &lt;code&gt;pending&lt;/code&gt; spec we had cluttering things up. We haven't got anything else we can seriously test yet anyway.&lt;/p&gt;
&lt;p&gt;Now let's run &lt;code&gt;rake spec:models&lt;/code&gt; to focus our efforts on what we've just done:&lt;/p&gt;
&lt;pre&gt;..

Finished in 0.09378 seconds
2 examples, 0 failures&lt;/pre&gt;
&lt;h3&gt;How to have specs run automatically with Watchr&lt;/h3&gt;
&lt;p&gt;Let's assume we've progressed with developing our app and we're working on models and controllers, testing along the way. Rather than running &lt;code&gt;rake&lt;/code&gt; or &lt;code&gt;bundle exec rspec&lt;/code&gt; all of the time, wouldn't it be great to have the relevant spec run &lt;em&gt;automatically&lt;/em&gt; when we either edit the spec or a model/controller that has a spec? Well, with &lt;a href="https://github.com/mynyml/watchr"&gt;watchr&lt;/a&gt;, we can. &lt;em&gt;(Note: Some people prefer &lt;a href="http://ph7spot.com/musings/getting-started-with-autotest"&gt;autotest&lt;/a&gt;. I find watchr more flexible and useful for other things beyond just running specs.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But if you really want to use autotest, Mike Bethany explains &lt;a href="http://mikbe.tk/2011/02/10/blazingly-fast-tests/"&gt;how to set it up in a similar scenario&lt;/a&gt; in a post of his own, along with autotest-growl for OS X notifications.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;watchr&lt;/code&gt; to your &lt;code&gt;Gemfile&lt;/code&gt;'s testing and production gem section:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;group&lt;/span&gt; &lt;span&gt;:development&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;:test&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;gem&lt;/span&gt; &lt;span&gt;&amp;#39;rspec-rails&amp;#39;&lt;/span&gt;
  &lt;span&gt;gem&lt;/span&gt; &lt;span&gt;&amp;#39;watchr&amp;#39;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then run &lt;code&gt;bundle&lt;/code&gt; to install it.&lt;/p&gt;
&lt;p&gt;Next, create a file called &lt;code&gt;.watchr&lt;/code&gt; in your app's root folder and populate it with this code:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;run_spec&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;unless&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;exist?&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
    &lt;span&gt;puts&lt;/span&gt; &lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt; does not exist&amp;quot;&lt;/span&gt;
    &lt;span&gt;return&lt;/span&gt;
  &lt;span&gt;end&lt;/span&gt;

  &lt;span&gt;puts&lt;/span&gt; &lt;span&gt;&amp;quot;Running &lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;
  &lt;span&gt;system&lt;/span&gt; &lt;span&gt;&amp;quot;bundle exec rspec &lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;file&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;
  &lt;span&gt;puts&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;quot;spec/.*/*_spec\.rb&amp;quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;
  &lt;span&gt;run_spec&lt;/span&gt; &lt;span&gt;match&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;0&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;watch&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;quot;app/(.*/.*)\.rb&amp;quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;
  &lt;span&gt;run_spec&lt;/span&gt; &lt;span&gt;%{spec/&lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;match&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;1&lt;/span&gt;&lt;span&gt;]&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;_spec.rb}&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This 'watchr script' directs a running watchr process to do a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If any file ending in &lt;code&gt;_spec.rb&lt;/code&gt; under the &lt;code&gt;spec/&lt;/code&gt; directory changes, run the &lt;code&gt;run_spec&lt;/code&gt; method with its filename.&lt;/li&gt;
&lt;li&gt;If any &lt;code&gt;.rb&lt;/code&gt; file under the &lt;code&gt;app/&lt;/code&gt; directory changes, call the &lt;code&gt;run_spec&lt;/code&gt; method with an equivalently named &lt;code&gt;_spec.rb&lt;/code&gt; file under &lt;code&gt;spec&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run_file&lt;/code&gt; accepts a filename for a spec file, checks it exists, and tells the system to run it (using &lt;code&gt;system&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you now run &lt;code&gt;watchr .watchr&lt;/code&gt; to use the &lt;code&gt;.watchr&lt;/code&gt; script, not much will happen. But if you make any change (or even just re-save) to, say, &lt;code&gt;spec/models/person_spec.rb&lt;/code&gt;, that spec will run automatically. Make a change to &lt;code&gt;app/models/person.rb&lt;/code&gt; and it's the same deal. To stop watchr, CTRL+C saves the day.&lt;/p&gt;
&lt;p&gt;Watchr can be used for a lot more than this but this is just for starters ;-)&lt;/p&gt;
&lt;p&gt;Optionally, you might also like to create &lt;code&gt;lib/tasks/watchr.rake&lt;/code&gt; and include the following code so you can just remember to run &lt;code&gt;rake watchr&lt;/code&gt; instead (it's nice to have anything you run within a project contained in one place):&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;desc&lt;/span&gt; &lt;span&gt;&amp;quot;Run watchr&amp;quot;&lt;/span&gt;
&lt;span&gt;task&lt;/span&gt; &lt;span&gt;:watchr&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;sh&lt;/span&gt; &lt;span&gt;%{bundle exec watchr .watchr}&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;How to get faster spec runs with Spork&lt;/h3&gt;
&lt;p&gt;We've got Rails 3 running with RSpec 2 and watchr's giving us some automatically-running-spec love. But do you notice how slow it is? Specs run quickly once they're loaded but there are several seconds of waiting beforehand.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/yslow.png" alt="" title="yslow" width="130" height="106" style="float:right;margin-left:18px"&gt;If you run &lt;code&gt;time rake spec:models&lt;/code&gt; with Ruby 1.9.2, you'll probably see a wallclock time of over 5 seconds (5.204s on my machine and I'm SSDed up) - holy splingledoops! If not, you're lucky, but it's &lt;a href="http://groups.google.com/group/rubyonrails-core/browse_thread/thread/88519ef5a53088a1/c01ba447c6dc0de7?lnk=raot"&gt;a commonly reported problem&lt;/a&gt; with some improvements expected in Ruby 1.9.3. We can't wait that long though..&lt;/p&gt;
&lt;p&gt;Enter &lt;a href="https://github.com/timcharper/spork"&gt;Spork&lt;/a&gt;. Spork is a tool that loads the Rails environment and then &lt;em&gt;forks&lt;/em&gt; each time you want to run some specs (or tests, it can be set up to run with &lt;code&gt;Test::Unit&lt;/code&gt; too). In this way, the whole Rails initialization process is skipped, shaving valuable seconds off of your spec runs.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/horriblediagram1.png" alt="" title="horriblediagram" width="250" height="211" style="float:right;margin-left:16px;margin-bottom:8px"&gt;Edit your &lt;code&gt;Gemfile&lt;/code&gt; again and include Spork:&lt;/p&gt;
&lt;pre&gt;gem &amp;#39;spork&amp;#39;, &amp;#39;~&amp;gt; 0.9.0.rc&amp;#39;&lt;/pre&gt;
&lt;p&gt;Run &lt;code&gt;bundle&lt;/code&gt; to install Spork.&lt;/p&gt;
&lt;p&gt;Next, Spork needs to make some changes to your &lt;code&gt;spec/spec_helper.rb&lt;/code&gt; file. Because it only initializes the Rails environment once and then forks it, you might have initialization features that you &lt;em&gt;need&lt;/em&gt; to run on each test run. Spork will let you do this but it needs to make those changes first. Run:&lt;/p&gt;
&lt;pre&gt;spork --bootstrap&lt;/pre&gt;
&lt;p&gt;The result:&lt;/p&gt;
&lt;pre&gt;Using RSpec
Bootstrapping /Users/peter/dev/rails/myapp/spec/spec_helper.rb.
Done. Edit /Users/peter/dev/rails/myapp/spec/spec_helper.rb now with your favorite text editor and follow the instructions.&lt;/pre&gt;
&lt;p&gt;Bring up &lt;code&gt;spec/spec_helper.rb&lt;/code&gt;. All &lt;code&gt;spork --bootstrap&lt;/code&gt; has done is add some extra code to the top of the file. Read the comments there to get a better feel for what to do and what Spork requires and keep them in mind as we progress (in case you want to do something differently).&lt;/p&gt;
&lt;p&gt;Get rid of &lt;code&gt;require 'rubygems'&lt;/code&gt; from the first line - we're using Bundler so it's not necessary.&lt;/p&gt;
&lt;p&gt;Next, &lt;em&gt;cut&lt;/em&gt; and paste all of the 'old' contents of &lt;code&gt;spec_helper.rb&lt;/code&gt; into the &lt;code&gt;Spork.prefork&lt;/code&gt; block. Since we're running an empty(ish) project, there's nothing special we've added that we need to run on each run using the &lt;code&gt;Spork.each_run&lt;/code&gt; block. We can leave that empty.&lt;/p&gt;
&lt;p&gt;You'll end up with a &lt;code&gt;spec_helper.rb&lt;/code&gt; file that looks like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;spork&amp;#39;&lt;/span&gt;

&lt;span&gt;Spork&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;prefork&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;# Loading more in this block will cause your tests to run faster. However, &lt;/span&gt;
  &lt;span&gt;# if you change any configuration or code from libraries loaded here, you&amp;#39;ll&lt;/span&gt;
  &lt;span&gt;# need to restart spork for it take effect.&lt;/span&gt;
  &lt;span&gt;# This file is copied to spec/ when you run &amp;#39;rails generate rspec:install&amp;#39;&lt;/span&gt;
  &lt;span&gt;ENV&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;&amp;quot;RAILS_ENV&amp;quot;&lt;/span&gt;&lt;span&gt;]&lt;/span&gt; &lt;span&gt;||=&lt;/span&gt; &lt;span&gt;&amp;#39;test&amp;#39;&lt;/span&gt;
  &lt;span&gt;require&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;expand_path&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;quot;../../config/environment&amp;quot;&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span&gt;__FILE__&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
  &lt;span&gt;require&lt;/span&gt; &lt;span&gt;&amp;#39;rspec/rails&amp;#39;&lt;/span&gt;

  &lt;span&gt;# Requires supporting ruby files with custom matchers and macros, etc,&lt;/span&gt;
  &lt;span&gt;# in spec/support/ and its subdirectories.&lt;/span&gt;
  &lt;span&gt;Dir&lt;/span&gt;&lt;span&gt;[&lt;/span&gt;&lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;join&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&amp;quot;spec/support/**/*.rb&amp;quot;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;].&lt;/span&gt;&lt;span&gt;each&lt;/span&gt; &lt;span&gt;{&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;&lt;span&gt;f&lt;/span&gt;&lt;span&gt;|&lt;/span&gt; &lt;span&gt;require&lt;/span&gt; &lt;span&gt;f&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;

  &lt;span&gt;RSpec&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;configure&lt;/span&gt; &lt;span&gt;do&lt;/span&gt; &lt;span&gt;|&lt;/span&gt;&lt;span&gt;config&lt;/span&gt;&lt;span&gt;|&lt;/span&gt;
    &lt;span&gt;# == Mock Framework&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;
    &lt;span&gt;# If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:&lt;/span&gt;
    &lt;span&gt;#&lt;/span&gt;
    &lt;span&gt;# config.mock_with :mocha&lt;/span&gt;
    &lt;span&gt;# config.mock_with :flexmock&lt;/span&gt;
    &lt;span&gt;# config.mock_with :rr&lt;/span&gt;
    &lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;mock_with&lt;/span&gt; &lt;span&gt;:rspec&lt;/span&gt;

    &lt;span&gt;# Remove this line if you&amp;#39;re not using ActiveRecord or ActiveRecord fixtures&lt;/span&gt;
    &lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;fixture_path&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;#{&lt;/span&gt;&lt;span&gt;::&lt;/span&gt;&lt;span&gt;Rails&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;root&lt;/span&gt;&lt;span&gt;}&lt;/span&gt;&lt;span&gt;/spec/fixtures&amp;quot;&lt;/span&gt;

    &lt;span&gt;# If you&amp;#39;re not using ActiveRecord, or you&amp;#39;d prefer not to run each of your&lt;/span&gt;
    &lt;span&gt;# examples within a transaction, remove the following line or assign false&lt;/span&gt;
    &lt;span&gt;# instead of true.&lt;/span&gt;
    &lt;span&gt;config&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;use_transactional_fixtures&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;true&lt;/span&gt;
  &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;Spork&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;each_run&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;# This code will be run each time you run your specs.&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Head back to your shell and the root of your project and run &lt;code&gt;spork&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;Using RSpec
Loading Spork.prefork block...
Spork is ready and listening on 8989!&lt;/pre&gt;
&lt;p&gt;Now we're cooking with gas. Open another shell, head to the root of your project, and run &lt;code&gt;watchr .watchr&lt;/code&gt; too. Then head to &lt;code&gt;spec/models/person_spec.rb&lt;/code&gt; in your text editor and re-save it (or even make a change if you want). Your specs run but.. they're no faster! What's wrong?&lt;/p&gt;
&lt;p&gt;It turns out we need to make another change so that RSpec knows we're running Spork. Edit the &lt;code&gt;.rspec&lt;/code&gt; file (mentioned earlier) and add &lt;code&gt;--drb&lt;/code&gt; to the line (so it probably reads &lt;code&gt;--colour --drb&lt;/code&gt;). &lt;em&gt;Now&lt;/em&gt;, edit the spec again, save, and.. fast!&lt;/p&gt;
&lt;p&gt;You should note that if you use &lt;code&gt;rake&lt;/code&gt; at this point to run your entire suite, it'll still not be particularly fast because &lt;em&gt;rake&lt;/em&gt; itself is initializing Rails in order to do its job. But if you want to run your entire suite quickly, just run:&lt;/p&gt;
&lt;pre&gt;rspec spec&lt;/pre&gt;
&lt;p&gt;With our dummy app and on my machine, this runs in a wallclock time of 0.759s - a serious improvement over 5.2 seconds.&lt;/p&gt;
&lt;p&gt;We have Rails 3, RSpec 2, watchr, spork, and SUPER-DUPER FAST SPECS all running on Ruby 1.9.2. Score!&lt;/p&gt;
&lt;p&gt;A minor snafu will remain, though. If you update &lt;code&gt;app/models/person.rb&lt;/code&gt;, the change won't take effect in your tests since Spork has the &lt;em&gt;old&lt;/em&gt; &lt;code&gt;Person&lt;/code&gt; still in memory. One way around this is to edit &lt;code&gt;config/environments/test.rb&lt;/code&gt; and change:&lt;/p&gt;
&lt;pre&gt;config.cache_classes = true&lt;/pre&gt;
&lt;p&gt;To:&lt;/p&gt;
&lt;pre&gt;config.cache_classes = false&lt;/pre&gt;
&lt;p&gt;Now your app's classes are reloaded when necessary.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/awyeah.jpeg" alt="" title="awyeah" width="348" height="232" style="text-align:center;margin-left:auto;margin-right:auto"&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=9kQfKhEconY:MOU_srPkVJM:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=9kQfKhEconY:MOU_srPkVJM:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=9kQfKhEconY:MOU_srPkVJM:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/9kQfKhEconY" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>15963914873140213203</gr:likingUser><gr:likingUser>15638623306692727372</gr:likingUser><gr:likingUser>02269656737792893975</gr:likingUser><gr:likingUser>04828842218541785042</gr:likingUser><gr:likingUser>11132888979039710046</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>18368794134664966015</gr:likingUser><gr:likingUser>11774881710904772251</gr:likingUser><gr:likingUser>12064991305330935676</gr:likingUser><gr:likingUser>05272376215565670505</gr:likingUser><gr:likingUser>06273792160116904845</gr:likingUser><gr:likingUser>07627850390712298043</gr:likingUser><gr:likingUser>00008934257923356678</gr:likingUser><gr:likingUser>06057854811868693294</gr:likingUser><gr:likingUser>09193292141477413545</gr:likingUser><gr:likingUser>08353054291962603524</gr:likingUser><gr:likingUser>07573777946365969643</gr:likingUser><gr:likingUser>08200398987966777732</gr:likingUser><gr:likingUser>02428719105696136930</gr:likingUser><gr:likingUser>05874166663540832169</gr:likingUser><gr:likingUser>05370333769261935271</gr:likingUser><gr:likingUser>16216928680461065086</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:crawl-timestamp-msec="1298081161825"><id gr:original-id="http://www.rubyinside.com/?p=4323">tag:google.com,2005:reader/item/3c07ad12e62baa01</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/fresh" scheme="http://www.google.com/reader/" label="fresh"/><category term="News" scheme="http://www.rubyinside.com"/><title type="html">Two Security Vulnerabilities Force 3 New Releases of MRI Ruby 1.8.7, 1.9.1, and 1.9.2</title><published>2011-02-19T02:05:32Z</published><updated>2011-03-14T16:29:35Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/FyIShGEDivc/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/two-security-vulnerabilities-force-3-new-releases-of-mri-ruby-1-8-7-1-9-1-and-1-9-2-4323.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/arghhhh-150x150.png" alt="" title="arghhhh" width="100" style="float:left;margin-right:18px"&gt;It's been a &lt;em&gt;dies horribilis&lt;/em&gt; for MRI Ruby today with two new security vulnerabilities forcing the release of 3 new recommended production versions of the de facto official Ruby interpreter. The first, a vulnerability in &lt;code&gt;FileUtils.remove_entry_secure&lt;/code&gt; affects both 1.8 and 1.9 branches, while the second, a $SAFE mode vulnerability, affects only 1.8.&lt;/p&gt;
&lt;h3&gt;The FileUtils Vulnerability (1.8 and 1.9)&lt;/h3&gt;
&lt;p&gt;Urabe Shyouhei of the Ruby core team has &lt;a href="http://www.ruby-lang.org/en/news/2011/02/18/fileutils-is-vulnerable-to-symlink-race-attacks/"&gt;announced that FileUtils is vulnerable to symlink race attacks&lt;/a&gt; and he's not talking about hate crimes. Ruby versions &lt;em&gt;including and prior&lt;/em&gt; to Ruby 1.8.6p420, Ruby 1.8.7p330, Ruby 1.9.1p430 and Ruby 1.9.2p136 are affected so you're almost guaranteed to be affected.&lt;/p&gt;
&lt;p&gt;The problem is &lt;a href="http://www.ruby-doc.org/stdlib/libdoc/fileutils/rdoc/classes/FileUtils.html#M000917"&gt;FileUtils#remove_entry_secure&lt;/a&gt;, a method that was meant to be more secure than its sibling &lt;code&gt;FileUtils#remove_entry&lt;/code&gt;. What the &lt;code&gt;remove_entry*&lt;/code&gt; methods do is to 'remove' an entry in the local file system. The problem, though, is that &lt;code&gt;remove_entry_secure&lt;/code&gt;'s security wasn't quite good enough and it could be used by local users to delete arbitrary files and directories. Not a great feature.&lt;/p&gt;
&lt;h3&gt;The $SAFE Vulnerability (1.8 only)&lt;/h3&gt;
&lt;p&gt;Ruby's &lt;a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/taint.html"&gt;"safe levels"&lt;/a&gt; provide a way for you to make the Ruby interpreter more "paranoid" about operations it can perform and the data it can process. There are five levels and they progressively lock down what Ruby will accept - particularly useful if it's necessary to consider all data to be tainted, for example.&lt;/p&gt;
&lt;p&gt;This recent vulnerability plays on the fact that the &lt;code&gt;Exception&lt;/code&gt; class can both accept and return a string. The bad part is that &lt;code&gt;Exception&lt;/code&gt; wasn't respecting the safe level in terms of keeping the string &lt;em&gt;tainted.&lt;/em&gt; Urabe Shyouhei provides this example:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;$secret_path&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;"foo"&lt;/span&gt;

&lt;span&gt;proc&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
    &lt;span&gt;$SAFE&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;4&lt;/span&gt;
    &lt;span&gt;Exception&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;new&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$secret_path&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;to_s&lt;/span&gt;
    &lt;span&gt;$secret_path&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;replace&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;"/etc/passwd"&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;&lt;span&gt;.&lt;/span&gt;&lt;span&gt;call&lt;/span&gt;

&lt;span&gt;open&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;$secret_path&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; &lt;span&gt;do&lt;/span&gt;
  &lt;span&gt;# do the dirty here&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Thankfully, it only affects Ruby 1.8 (not Ruby 1.9) in the shape of Ruby 1.8.6p420 and earlier and Ruby 1.8.7p330 and earlier. The downside? That covers most Ruby 1.8 installs out there, including the default one with OS X. Get upgrading.&lt;/p&gt;
&lt;h3&gt;The Solution - New Releases of Ruby&lt;/h3&gt;
&lt;p&gt;Undoubtedly you have your own ways and means of doing upgrades (using RVM, for example) but Urabe has provided &lt;a href="http://www.ruby-lang.org/en/news/2011/02/18/fileutils-is-vulnerable-to-symlink-race-attacks/"&gt;links&lt;/a&gt; to the latest builds on the official MRI Ruby site if you want them. Repeated here:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ruby 1.8.7-p334:&lt;/strong&gt; &lt;a href="http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p334.tar.gz"&gt;http://ftp.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7-p334.tar.gz&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Ruby 1.9.1-p431:&lt;/strong&gt; &lt;a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p431.tar.gz"&gt;http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.1-p431.tar.gz&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Ruby 1.9.2-p180:&lt;/strong&gt; &lt;a href="http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p180.tar.gz"&gt;http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.2-p180.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last but not least, if you've been wondering why Ruby Inside hasn't updated for two weeks, I have some explaining to do and.. it'll be in a post of its own very soon ;-) Meanwhile, check out &lt;a href="http://www.rubyflow.com/"&gt;RubyFlow's snazzy new design!&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=FyIShGEDivc:f7jVRWDaIbg:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=FyIShGEDivc:f7jVRWDaIbg:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=FyIShGEDivc:f7jVRWDaIbg:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/FyIShGEDivc" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>13668608591451703896</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1297077065354"><id gr:original-id="http://antirez.com/post/225">tag:google.com,2005:reader/item/eee87cab91cf48b2</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><title type="html">there is something between append only and reusing blocks</title><published>2011-02-07T11:02:28Z</published><updated>2011-02-07T11:02:28Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/n8A9yW503kw/btree-reuse-blocks-with-delay.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;One of the most interesting properties of an append only btree is that it's impossible to corrupt. There are other interesting properties as well like concurrent accesses are trivial, since whatever is the root and all the nodes your reader is going to access, they are all valid, just they may be an old representation of the btree.
&lt;br&gt;&lt;br&gt;

But there is a price to pay that I'm not happy with, that is, the append only btree requires a compaction process, otherwise it will get bigger and bigger. If your use case is mostly-reads this may be ok, but if you plan to use a lot of writes there is some math to do.
&lt;br&gt;&lt;br&gt;

Think at this: if you have many writes that are near to the max disk I/O that your server is able to deliver, your append only btree file size is going to get big of course, and you need compaction. But you are already near to the I/O limit, what happens once you start writing a new file to rewrite the btree? The additional I/O can affect badly the performance of the btree. Can you slow down writes in order to reduce the impact? Unfortunately not, otherwise the rewrite will never be fast enough to compact the file.
&lt;br&gt;&lt;br&gt;

I'm all for performance characteristics that are as predictable as possible, so I don't like this design. It is for sure a sensible one for many applications, but I can live better with the idea of a single file that is never rewritten (if not for crash recovery or alike) and that is able to reuse the no longer used blocks.
&lt;br&gt;&lt;br&gt;

But guess what? such a btree is much simpler to corrupt, especially if you don't use fsync() in order to implement write barriers. Disks and operating systems can reorder writes, so even if you do something like:
&lt;ul&gt;&lt;li&gt;Create a new node&lt;/li&gt;

&lt;li&gt;Link the new node to the existing tree&lt;/li&gt;

&lt;/ul&gt;
If there is not an fsync() between the two, it is well possible that writes are reordered, so that the link is created before the node is written on disk. If a crash happens between this two operations you end with a corrupted btree.
But are the append only strategy and update in place (and reuse blocks via free lists) so incompatible? Possibly not.
&lt;br&gt;&lt;br&gt;

Experimenting with my btree implementation I discovered what is probably the discovery of hot water, that is, likely common practice, but the kind of common practice that you'll never find in an algorithms book. That is, what about if my free list entries have a timeout so that they can't be used before 60 seconds?
&lt;br&gt;&lt;br&gt;

This way the btree implementation can always rewrite the modified nodes instead of updating them in place. Even if there is a read currently in progress, we are sure that even if our writes will reuse nodes, no recently freed node will be used, so unless the read will take 60 seconds to complete, everything will go well.
&lt;br&gt;&lt;br&gt;

Unfortunately we still need a fixed offset for our root node pointer, so an fsync is still needed on every write in order to make sure that reordering can't corrupt our btree on crash.
&lt;br&gt;&lt;br&gt;

With my implementation I'm not still at this stage as I'm starting with the most basic things that can work well, but that's the idea for the next releases.&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 6527 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 165.8 visits/day)&lt;/div&gt;Posted at 11:02:28 &lt;a href="http://antirez.com/post/btree-reuse-blocks-with-delay.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/btree-reuse-blocks-with-delay.html"&gt;7 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=225"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=there+is+something+between+append+only+and+reusing+blocks&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fbtree-reuse-blocks-with-delay.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/btree-reuse-blocks-with-delay.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/n8A9yW503kw" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>03256507980052811175</gr:likingUser><gr:likingUser>06404047744720231835</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1297027020640"><id gr:original-id="tag:timeless.judofyr.net,2011-02-06:1297028181">tag:google.com,2005:reader/item/7efbc907ec2ca33b</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><title type="html">Making Ruby Gems</title><published>2011-02-06T21:36:21Z</published><updated>2011-02-06T21:36:21Z</updated><link rel="alternate" href="http://timeless.judofyr.net/making-ruby-gems" type="text/html"/><content xml:base="http://timeless.judofyr.net/" type="html">&lt;p&gt;One of my favorite aspects of the Ruby community is its strong commitment to Open Source. Thousands of Rubyists have written great libraries and placed the code up on GitHub (or elsewhere on the Internet) for everyone to use. Ruby has a fantastic tool to distribute these libraries: RubyGems. One of the reasons that Open Source runs so strong through Ruby’s veins is how easy it is to share your code.&lt;/p&gt;

&lt;p&gt;While making a gem is really easy, there are a few additional concens that you should be aware of when you distribute your code as a gem. Here’s an example of building a simple Gem, with some notes on best practices along the way.&lt;/p&gt;

&lt;h2&gt;The structure of a gem&lt;/h2&gt;

&lt;p&gt;At its core, a gem consists of two things: some &lt;em&gt;code&lt;/em&gt;, and a &lt;em&gt;gemspec&lt;/em&gt;. The gemspec file defines a &lt;code&gt;Gem::Specification&lt;/code&gt; object, which is used by &lt;code&gt;rubygems&lt;/code&gt; to handle the management of your code. That’s it! Nothing complicated. However, there are some conventions that virtually all gems follow that will help you out.&lt;/p&gt;

&lt;p&gt;Most gems have a directory structure that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tree -d mygem
|-- lib/
|   |-- mygem.rb
|   `-- mygem/
|       |-- base.rb
|       `-- version.rb
|-- test/
|-- bin/
|-- Rakefile
`-- mygem.gemspec&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of the code for the gem goes under the &lt;code&gt;lib&lt;/code&gt; directory. This directory is what gets added to your $LOAD_PATH, and so &lt;code&gt;lib&lt;/code&gt; usually contains two things: mygem.rb and a directory named mygem. mygem.rb will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;#39;&lt;/span&gt;mygem/base&lt;span&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If there were more files in &lt;code&gt;lib/mygem&lt;/code&gt;, they’d be &lt;code&gt;require&lt;/code&gt;d here, too. This is done so that you can break up your project into however many files you’d like, and name them whatever you want, and nobody will tramp on each others’ toes. Think about it: if I have two gems installed, and both of them have their &lt;code&gt;lib&lt;/code&gt; directories included, and they both name a file &lt;code&gt;json.rb&lt;/code&gt;, which one is going to be loaded? It causes problems. So just follow this structure, and everything will work out.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;version.rb&lt;/code&gt; file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;module&lt;/span&gt; &lt;span&gt;Mygem&lt;/span&gt;
  &lt;span&gt;VERSION&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;0.0.1&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This constant will be used in our gemspec. It’s nice to have it in a separate file, so that we can easily find and increment it when releasing a new version of the gem.&lt;/p&gt;

&lt;p&gt;I’m sure that you can guess what goes in the &lt;code&gt;test&lt;/code&gt; directory: your unit tests! You do have those, right? We’ll talk more about this later.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;bin&lt;/code&gt; directory holds any binaries that we want to distribute with our gem. Calling them ‘binaries’ is sort of a misnomer, though: these are almost always just Ruby scripts, starting off with a ‘shebang line&lt;code&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt;!/usr/bin/env ruby&lt;/span&gt;

&lt;span&gt;begin&lt;/span&gt;
  &lt;span&gt;require&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;#39;&lt;/span&gt;mygem&lt;span&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;rescue&lt;/span&gt; &lt;span&gt;LoadError&lt;/span&gt;
  &lt;span&gt;require&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;#39;&lt;/span&gt;rubygems&lt;span&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
  &lt;span&gt;require&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;#39;&lt;/span&gt;mygem&lt;span&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;

&lt;span&gt;&lt;span&gt;#&lt;/span&gt;more code goes here&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a patten you’ll often see in gems that also give you scripts to run. Why the &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;rescue&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;? Well, &lt;a href="http://tomayko.com/writings/require-rubygems-antipattern"&gt;‘require “rubygems” is wrong’&lt;/a&gt;. Basically, someone may be using something other than rubygems to manage their path, and so you shouldn’t trample on their toes. But if you can’t find your gem, then giving it a second shot with Rubygems is better than crashing.&lt;/p&gt;

&lt;h2&gt;The Gemspec&lt;/h2&gt;

&lt;p&gt;Here’s a sample gemspec:&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;&lt;span&gt;#&lt;/span&gt; -*- encoding: utf-8 -*-&lt;/span&gt;
&lt;span&gt;&lt;span&gt;$&lt;/span&gt;:&lt;/span&gt;.&lt;span&gt;push&lt;/span&gt; &lt;span&gt;File&lt;/span&gt;.&lt;span&gt;expand_path&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;../lib&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;__FILE__&lt;/span&gt;)
&lt;span&gt;require&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;mygem/version&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

&lt;span&gt;Gem&lt;/span&gt;::&lt;span&gt;Specification&lt;/span&gt;.&lt;span&gt;new&lt;/span&gt; &lt;span&gt;do &lt;/span&gt;|&lt;span&gt;s&lt;/span&gt;|
  s.&lt;span&gt;name&lt;/span&gt;        &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;mygem&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  s.&lt;span&gt;version&lt;/span&gt;     &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Mygem&lt;/span&gt;::&lt;span&gt;VERSION&lt;/span&gt;
  s.&lt;span&gt;platform&lt;/span&gt;    &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Gem&lt;/span&gt;::&lt;span&gt;Platform&lt;/span&gt;::&lt;span&gt;RUBY&lt;/span&gt;
  s.&lt;span&gt;authors&lt;/span&gt;     &lt;span&gt;=&lt;/span&gt; [&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;Steve Klabnik&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  s.&lt;span&gt;email&lt;/span&gt;       &lt;span&gt;=&lt;/span&gt; [&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;steve@steveklabnik.com&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
  s.&lt;span&gt;homepage&lt;/span&gt;    &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  s.&lt;span&gt;summary&lt;/span&gt;     &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;%q{&lt;/span&gt;A sample gem&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;
  s.&lt;span&gt;description&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;%q{&lt;/span&gt;A sample gem. It doesn&amp;#39;t do a whole lot, but it&amp;#39;s still useful.&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;

  s.&lt;span&gt;add_dependency&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;launchy&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  s.&lt;span&gt;add_development_dependency&lt;/span&gt; &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;rspec&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;~&amp;gt;2.5.0&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;

  s.&lt;span&gt;files&lt;/span&gt;         &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;git ls-files&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;.&lt;span&gt;split&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  s.&lt;span&gt;test_files&lt;/span&gt;    &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;git ls-files -- {test,spec,features}/*&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;.&lt;span&gt;split&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)
  s.&lt;span&gt;executables&lt;/span&gt;   &lt;span&gt;=&lt;/span&gt; &lt;span&gt;&lt;span&gt;`&lt;/span&gt;git ls-files -- bin/*&lt;span&gt;`&lt;/span&gt;&lt;/span&gt;.&lt;span&gt;split&lt;/span&gt;(&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;\n&lt;/span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;).&lt;span&gt;map&lt;/span&gt;{ |&lt;span&gt;f&lt;/span&gt;| &lt;span&gt;File&lt;/span&gt;.&lt;span&gt;basename&lt;/span&gt;(f) }
  s.&lt;span&gt;require_paths&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; [&lt;span&gt;&lt;span&gt;&amp;quot;&lt;/span&gt;lib&lt;span&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;]
&lt;span&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see, it uses the standard ‘pass a block to new’ DSL convention to build up all of the information about our Gem. Most of it is pretty self-explanatory, but there are a few interesting parts: You can see we used the Mygem::VERSION constant we defined earlier to set our version. We use &lt;code&gt;git&lt;/code&gt; to list all of the files in our project, as well as our test files and executables. The ‘add dependency’ lines tell &lt;code&gt;rubygems&lt;/code&gt; what other gems we’ll need to install, if the user doesn’t have them already.&lt;/p&gt;

&lt;h2&gt;Tools to build tools&lt;/h2&gt;

&lt;p&gt;Because gems follow these conventions, there are a bunch of different gems that can help you make gems, like &lt;a href="http://seattlerb.rubyforge.org/hoe/"&gt;hoe&lt;/a&gt; or &lt;a href="https://github.com/technicalpickles/jeweler"&gt;jeweler&lt;/a&gt;. My favorite is a one-two punch with &lt;code&gt;rvm&lt;/code&gt; and bundler.&lt;/p&gt;

&lt;p&gt;If you’re not using &lt;a href="http://rvm.beginrescueend.com/"&gt;rvm&lt;/a&gt; already, you should. rvm is wonderful for a few reasons, but when you’re making a gem, rvm’s &lt;a href="http://rvm.beginrescueend.com/gemsets/"&gt;gemsets&lt;/a&gt; feature allow you to develop your gems in a cleanroom environment. This is nice for two reasons: you can verify that you have all of your dependencies configured properly, and you won’t pollute your regular Ruby setup with your undoubtedly half-broken under-development versions of your own gems.&lt;/p&gt;

&lt;p&gt;Bundler is great for managing depedancies of gems in your applications, but it also includes two cool tools to help you make gems: &lt;code&gt;bundle gem &amp;lt;gemname&amp;gt;&lt;/code&gt; will create a gem skeleton, and that skeleton is set up with a few &lt;code&gt;rake&lt;/code&gt; tasks to make your development of gems nice and simple. The bundler skeleton sets up all of those directories I showed you above, as well as giving you a Gemfile, a &lt;code&gt;git&lt;/code&gt; repository, and a .gitignore file. The three &lt;code&gt;rake&lt;/code&gt; tasks bunlder installs are ‘build,’ ‘install,’ and ‘release.’ ‘build’ builds your gem into a .gem, ‘install’ installs that gem into your current Ruby, and ‘release’ will tag your release, push it to GitHub, and then push your gem to rubygems.org. Super simple.&lt;/p&gt;

&lt;h2&gt;An example&lt;/h2&gt;

&lt;p&gt;I gave a lightning talk at &lt;a href="http://pghrb.org/"&gt;pghrb&lt;/a&gt; recently, and actually live-coded a gem while explaining this stuff. The resulting gem, which simply opens my presentation in a web browser, is on GitHub. It’s called &lt;a href="https://github.com/steveklabnik/teachmehowtomakearubygem"&gt;teachmehowtomakearubygem&lt;/a&gt;, and you can get it with &lt;code&gt;gem install teachmehowtomakearubygem&lt;/code&gt;. I’m still revising the presentation to read better; I didn’t want to present a giant wall of text, but this article is much easier to read than the presentation is. Still, all of the example code is there.&lt;/p&gt;

&lt;h2&gt;Testing your Gem&lt;/h2&gt;

&lt;p&gt;If you set up your Rakefile to run your tests with &lt;code&gt;rake test&lt;/code&gt;, you can take advantage of a really neat new project: &lt;a href="http://gem-testers.org/"&gt;gem-testers&lt;/a&gt;. The only other thing you need to do is add an empty &lt;code&gt;.gemtest&lt;/code&gt; file to your project, and gem-testers will pick it up. Once enabled, your gem’s tests will be run on a variety of machines by a bunch of different people. This project is just getting underway, but similar efforts have provided a great benefit to people who write Perl libraries. Don’t have a Mac, but want to test your gem out on x86_64/darwin? gem-testers to the rescue!&lt;/p&gt;

&lt;h2&gt;A note on versioning&lt;/h2&gt;

&lt;p&gt;Try to follow &lt;a href="http://semver.org/"&gt;semantic versioning&lt;/a&gt; when releasing your gems. This makes it much easier for people using your gem to use things like ‘~&amp;gt;’ when specifying the version they’d like to use, and not have to worry too much about API breakage. A little bit of work by everyone to follow conventions goes a long way.&lt;/p&gt;

&lt;h2&gt;Even further: C extensions&lt;/h2&gt;

&lt;p&gt;I don’t have much experience creating gems with C extensions, so if you have any best practices to share, please &lt;a href="http://timeless.judofyr.net/comments"&gt;get in touch&lt;/a&gt; and share them.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/MagnusHolm/~4/tuwM2HTR5DE" height="1" width="1"&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>12050031834138523626</gr:likingUser><gr:likingUser>02480044899494396240</gr:likingUser><gr:likingUser>09211568646312498198</gr:likingUser><gr:likingUser>12661663256831413124</gr:likingUser><gr:likingUser>16325469533121512015</gr:likingUser><gr:likingUser>11148217089971950025</gr:likingUser><gr:likingUser>08982619185204047523</gr:likingUser><gr:likingUser>10240643020089782013</gr:likingUser><gr:likingUser>17255393626595171300</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/MagnusHolm"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/MagnusHolm</id><title type="html">The timeless repository</title><link rel="alternate" href="http://timeless.judofyr.net/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1296902500202"><id gr:original-id="http://antirez.com/post/224">tag:google.com,2005:reader/item/c76ed9cff2bd3e4f</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><title type="html">Pull requests are not conversations</title><published>2011-02-05T10:38:31Z</published><updated>2011-02-05T10:38:31Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/AR0fbQF0KgQ/pull-requests-are-not-conversations.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;I don't remember anything that changed my work flow in a so big way as git did in the latest two years.
I will not argue too much about that, as you probably experimented the effects yourself if you are reading this blog post, or perhaps you are among the guys I should say thanks for the fact I started using git.
&lt;br&gt;&lt;br&gt;

But if git is cool, &lt;a href="http://github.com"&gt;Github&lt;/a&gt; makes it cooler for sure. Github is like a &lt;b&gt;market&lt;/b&gt; for git, where code gets exchanged, shared, publicly hacked. In short I love git and github. Still I think that github &lt;b&gt;pull requests&lt;/b&gt; are posing a problem in the open source development world, and this post is all about this.
&lt;h3&gt;How it used to work&lt;/h3&gt;
Before git and pull requests the obvious way to contribute to a large enough open source project was to write a message in the mailing list of the project, asking about what the feelings are about adding a given feature.
&lt;br&gt;&lt;br&gt;

It was possible to start the discussion providing &lt;i&gt;also&lt;/i&gt; a patch, but not required. When I say &lt;i&gt;also&lt;/i&gt; I mean, along with all the rationale for adding the features, what the problems and complexities are, what the gains, and so forth.
&lt;br&gt;&lt;br&gt;

Like a painting uses colors but is not, after all, &lt;i&gt;about colors&lt;/i&gt;, so a software project uses code, but is after all, about design. Code can be used to prove your point, to show a way to obtain the effect you are seeking, but the most important point is the design of a new feature. The ability to resist to the temptation of adding things that are not useful but just appear to be useful, because perhaps there is a defect in some other part of the design, or because there is a not so obvious but simple way to get the same effect. And where to discuss this kind of things if not in the project mailing list?
&lt;br&gt;&lt;br&gt;

As github is a market for code, the project mailing list is a market for the project design (more and more together with Twitter, in my experience).
&lt;br&gt;&lt;br&gt;

So that is how contributions used to work, and how most of the Linux kernel itself was built.
But I've the feeling that github pull requests are bringing a new way of thinking to the table, that is preventing a lot of interesting discussions from happening, and at the same time is wasting a lot of coding resources.
&lt;h3&gt;Pull requests&lt;/h3&gt;
My point so far has been that contributing to code should be a conversation about design, with some code in order to support that conversation or to finally implement what seems a good design in a tangible form.
&lt;br&gt;&lt;br&gt;

In this conversation pull requests are the stage when a developer asks another one: &amp;quot;Hey, let&amp;#39;s merge that&amp;quot;. In github pull requests this happens in a very private way. This should be the very, very final stage of a contribution, but guess what, now most of the time is the &lt;b&gt;first stage&lt;/b&gt; of a contribution, that directly starts with a pull request, about a feature not publicly discussed, possibly not needed, or that is actually related to something else that is already a work in progress, and so forth. In the end this means that most of pull requests are not going to get merged. At least this is what happens with Redis.
&lt;br&gt;&lt;br&gt;

Pull requests used in this way are removing value from a conversation, that should otherwise be very different and public. Like:
&lt;ul&gt;&lt;li&gt;To mailing list: Hey guys, I've this idea what do you think?&lt;/li&gt;

&lt;li&gt;(Optionally) I've implemented a proof of concept, it's not finished but I think it shows my point: this is my topic branch.&lt;/li&gt;

&lt;li&gt;Bla bla bla, arguing about usefulness, alternatives, what can be improved and so forth.&lt;/li&gt;

&lt;li&gt;Finally, if the feature is accepted: code code code.&lt;/li&gt;

&lt;li&gt;And a new message arrives in the mailing list: ok, that's my code, let's merge if it seems sane enough.&lt;/li&gt;

&lt;/ul&gt;
We still take advantage of github that allows to make our topic branches explorable and testable. But the whole process is now sane and design centric. And since the discussion does not start with a &amp;quot;let&amp;#39;s merge&amp;quot; there is no need to provide a perfectly finished code, or code at all.
&lt;br&gt;&lt;br&gt;

Please if you have comments use &lt;a href="http://news.ycombinator.com/item?id=2182873"&gt;hacker news&lt;/a&gt; instead of the blog comments.&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 17477 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 422.3 visits/day)&lt;/div&gt;Posted at 10:38:31 &lt;a href="http://antirez.com/post/pull-requests-are-not-conversations.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/pull-requests-are-not-conversations.html"&gt;5 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=224"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=Pull+requests+are+not+conversations&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fpull-requests-are-not-conversations.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/pull-requests-are-not-conversations.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/AR0fbQF0KgQ" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>17436240768195182534</gr:likingUser><gr:likingUser>07381089235220823131</gr:likingUser><gr:likingUser>13908453888579385086</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><gr:likingUser>02714205789091616240</gr:likingUser><gr:likingUser>02821366625847833745</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1296707712222"><id gr:original-id="http://www.rubyinside.com/?p=4246">tag:google.com,2005:reader/item/62394bf054eb9c34</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><category term="Miscellaneous" scheme="http://www.rubyinside.com"/><category term="notweet" scheme="http://www.rubyinside.com"/><title type="html">Thanking Ruby Inside’s January 2011 Sponsors</title><published>2011-02-03T04:33:29Z</published><updated>2011-02-03T04:34:56Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/-q_MXzl6pa8/thanking-ruby-insides-january-2011-sponsors-4246.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/thanking-ruby-insides-january-2011-sponsors-4246.html" xml:lang="en" type="html">&lt;p&gt;It's time for us to thank the companies who help to keep Ruby Inside going by kindly sponsoring our work. So.. thank you! (And thank you for reading too, naturally.)&lt;/p&gt;
&lt;h3&gt;Red Dirt Ruby Conference - April 21-22, 2011 (Oklahoma City)&lt;/h3&gt;
&lt;p&gt;The &lt;a href="http://engine.adzerk.net/redirect/0/3179/3005/1313/6ceb66850ab2436caccd9d0375aacad3/19/24/3543/634323040639640186?keywords="&gt;Red Dirt Ruby Conference&lt;/a&gt; is a Ruby conference taking place in Oklahoma City this April. It's shaping up to be a great event with keynotes from Aaron Patterson (Nokogiri) and Dr Nic Williams (Engine Yard). Expect sunny weather with temperatures in the low 70s..&lt;/p&gt;
&lt;h3&gt;Spreadable - Viral Marketing Tools for your Apps&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://engine.adzerk.net/redirect/0/3126/2952/1313/85766cb05a5245c0b7b7980b55224ca0/19/24/3398/634312088369843266?keywords="&gt;Spreadable&lt;/a&gt; is a powerful 'tell a friend' referral tool you can easily plug into your site. It brings your app powerful viral social tools you and your users can use to spread the word about your work.&lt;/p&gt;
&lt;h3&gt;Jaconda - A Chat System for Project Teams&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://engine.adzerk.net/redirect/0/3128/2954/1313/fc6773af6f384b7186b7ca87733e02fd/19/24/3400/634312088369843266"&gt;Jaconda&lt;/a&gt; is a chat system designed for teams working on projects. It works from the browser, your IM app, or your phone, and lets you chat, share files, and keep up with tickets and project activity you can have sent automatically to your rooms.&lt;/p&gt;
&lt;h3&gt;New Relic — On-demand Application Management&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.newrelic.com/RPMlite-rails.html?utm_source=rubyinside&amp;amp;utm_medium=banner&amp;amp;utm_content=125x125&amp;amp;utm_campaign=rpm"&gt;New Relic&lt;/a&gt; is a Java and Ruby (and now PHP too!) application performance and reliability monitoring and management service that started life as a Rails-only service. With New Relic you can monitor your apps, find slow transactions, see specific SQL queries, and even run a code-level thread profile.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Trivia I Always Love To Point Out: New Relic is an anagram of founder "Lew Cirne"'s name!&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=-q_MXzl6pa8:dARA9ByJGu8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=-q_MXzl6pa8:dARA9ByJGu8:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=-q_MXzl6pa8:dARA9ByJGu8:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/-q_MXzl6pa8" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1296527648669"><id gr:original-id="http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html">tag:google.com,2005:reader/item/6340ffe3419c23d5</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><category term="News" scheme="http://www.rubyinside.com"/><category term="Tools" scheme="http://www.rubyinside.com"/><title type="html">RubyGems 1.5.0 Released: Now Supports Ruby 1.9.2</title><published>2011-02-01T02:33:52Z</published><updated>2011-02-13T04:38:43Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/vE86DE54JM0/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/rubygems-1-5-0-released-now-supports-ruby-1-9-2-4240.html" xml:lang="en" type="html">&lt;p&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/02/rubygems.png" width="98" height="98" alt="rubygems.png" style="float:left;margin-right:12px;margin-bottom:12px"&gt;Ryan Davis has &lt;a href="http://blog.zenspider.com/2011/01/rubygems-update-150-released.html"&gt;announced the release of RubyGems 1.5.0&lt;/a&gt;. It comes just a month after the &lt;a href="http://blog.zenspider.com/2010/12/rubygems-version-140-has-been.html"&gt;release of 1.4&lt;/a&gt; which, notoriously, didn't work with Ruby 1.9.2. These problems have now all been ironed out and Ruby 1.8 and 1.9 users alike can safely upgrade (fingers crossed).&lt;/p&gt;
&lt;p&gt;RubyGems is the popular (and official - as of Ruby 1.9) Ruby package manager with which most significant Ruby libraries and tools are distributed. The 1.5 release sees it pick up a few bug fixes and some enhancements, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ruby 1.9 support&lt;/li&gt;
&lt;li&gt;Post-build hooks that can cancel the gem install&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gem.find_files&lt;/code&gt; is now 40% faster (on Ruby 1.9)&lt;/li&gt;
&lt;li&gt;Better errors for corrupt Gem files, including paths&lt;/li&gt;
&lt;li&gt;A new &lt;a href="https://github.com/rubygems/rubygems/blob/master/UPGRADING.rdoc"&gt;UPGRADING documentation file&lt;/a&gt; to help with Ruby 1.9-related issues&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gem update&lt;/code&gt; no longer erroneously tries to update RubyGems itself by default&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To upgrade to RubyGems 1.5.0, run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem update --system&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you can learn more in the new &lt;a href="https://github.com/rubygems/rubygems/blob/master/UPGRADING.rdoc"&gt;UPGRADING documentation&lt;/a&gt;, or if you don't already have RubyGems for some reason, you can &lt;a href="https://rubygems.org/pages/download"&gt;download it from RubyGems.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; &lt;strike&gt;RubyGems 1.5.0 and Bundler are not the best of friends! If you're depending on Bundler tonight, don't install RubyGems 1.5.0 just yet. However, a 1.5 compatible version of Bundler is due within the next 24 hours.&lt;/strike&gt; A new version of Bundler has been released, supporting RubyGems 1.5.0. Upgrade now :-)&lt;/em&gt;&lt;/p&gt;
&lt;p style="padding:8px;background-color:#ff9"&gt;&lt;em&gt;[ad]&lt;/em&gt; &lt;a href="http://engine.adzerk.net/redirect/0/3126/2952/1313/85766cb05a5245c0b7b7980b55224ca0/19/24/3398/634312088369843266?keywords="&gt;Spreadable&lt;/a&gt; is a powerful 'tell a friend' referral tool you can easily plug into your site. It brings your app powerful viral social tools you and your users can use to spread the word about your work.&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=vE86DE54JM0:BzavB8TFU4Q:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=vE86DE54JM0:BzavB8TFU4Q:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=vE86DE54JM0:BzavB8TFU4Q:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/vE86DE54JM0" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>02955686121905988538</gr:likingUser><gr:likingUser>11132888979039710046</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>05272376215565670505</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1296425409383"><id gr:original-id="tag:timeless.judofyr.net,2011-01-30:1296423381">tag:google.com,2005:reader/item/041eb66f0ce770fe</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><title type="html">On Camping vs Sinatra</title><published>2011-01-30T21:36:21Z</published><updated>2011-01-30T21:36:21Z</updated><link rel="alternate" href="http://timeless.judofyr.net/on-camping-vs-sinatra" type="text/html"/><content xml:base="http://timeless.judofyr.net/" type="html">&lt;p&gt;Many years ago there was a tiny little &lt;strike&gt;ladybug&lt;/strike&gt; Ruby web framework called &lt;a href="http://whywentcamping.com/"&gt;Camping&lt;/a&gt;. Compared Rails’ thousands of lines of code, camping.rb was a tempting alternative for simple applications:&lt;/p&gt;
&lt;center&gt;&lt;img src="https://github.com/camping/camping/raw/master/extras/images/little-wheels.png"&gt;&lt;/center&gt;&lt;hr&gt;
&lt;p&gt;Welcome to the present, where every test framework ships with its own micro framework. Or was it the other way? Anyway, my point was: With so many alternatives, why would you want to go Camping? Why not Sinatra?&lt;/p&gt;

&lt;p&gt;Some time ago, this discussion started over at the &lt;a href="http://hackety-hack.com/"&gt;Hackety Hack&lt;/a&gt; mailing list, so I decided to chime in and present &lt;strong&gt;&lt;em&gt;SIX (UNIMPRESSIVE) REASONS CAMPING IS BETTER THAN YOU WOULD IMAGINE&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Please don’t mistake me, this is not &lt;strong&gt;&lt;em&gt;SIX (UNIMPRESSIVE) REASONS CAMPING IS BETTER THAN SINATRA&lt;/em&gt;&lt;/strong&gt; or even &lt;strong&gt;&lt;em&gt;SIX (UNIMPRESSIVE) REASONS YOU SHOULD DROP EVERYTHING YOU HAVE IN YOUR HAND RIGHT NOW AND START USING CAMPING&lt;/em&gt;&lt;/strong&gt;. All I’m saying is that Camping gets so many things &lt;em&gt;right&lt;/em&gt;. Not necessarily in very few lines of code or very fast, but nonetheless: I look at Camping code and nod to myself: “Yeah, this is probably the &lt;em&gt;correct&lt;/em&gt; way to do it”.&lt;/p&gt;

&lt;p&gt;Of course, this doesn’t really matter. If we cared about correctness, we would program in Haskell, not some language where monkey patching is acceptable in production code. As long as you’re comfortable in Sinatra (or any other framework), you should continue doing that.&lt;/p&gt;

&lt;p&gt;Without any more ado:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/ruby
SIX (UNIMPRESSIVE)                 # Markdown version:
REASONS CAMPING IS BETTER          # 1) Download http://timeless.judofyr.net/camping-vs-sinatra.rb
THAN YOU WOULD IMAGINE             # 2) ruby camping-vs-sinatra.rb

reasons.push(COMMUNITY) do %%
  Yes, Sinatra has a big community, but Camping definitely has a great
  community too. Size doesn&amp;#39;t always matter. Because there are so few users,
  it means every single issue gets full attention.

  If you&amp;#39;re only looking at the GitHub repo or ruby.reddit.com, Camping
  might seem a little dead, but that&amp;#39;s because everything happens on the
  mailing lists so it&amp;#39;s not always visible from the &amp;quot;outside&amp;quot;. (And other
  times, we&amp;#39;re simply restin&amp;#39;, just waiting for a question, suggestion or
  comment.)

  Besides, I don&amp;#39;t allow Camping to disappear. Not because I need it in my
  business or something like that, but because the code is so fucking great.
  I simply won&amp;#39;t allow it to die. Therefore I will *always* do my best to
  help people who are camping (just ask Eric Mill on this mailing list).
%%%%% end

reasons.push(UNPOLLUTED) do %%
  In Sinatra it&amp;#39;s a norm (whether you use Sinatra::Base or not), in Camping
  it&amp;#39;s the law:

      Camping.goes :Blog
      module Blog; end

      Camping.goes :Wiki
      module Wiki; end

  Every application lives under its own namespace. Yes, it requires a few
  more characters, but when you think about it, why *should* we allow are
  apps to run directly under the global namespace? That&amp;#39;s surely not how we
  design our other Ruby code. What makes it so different? Shouldn&amp;#39;t you for
  instance be able to `require &amp;quot;app&amp;quot;` and `include App::Helpers` somewhere
  else?

  Think of the environment; reduce your pollution!
%%%%% end

reasons.push(RESTful) do %%
  A central idea in REST is the concept of a resource, and that you can call
  methods on the resource (in order to get a representation of it). How would
  you apply these ideas in Ruby? What about this?

      class Posts
        def get; end
        def post; end
      end

  I would say this fits the description perfectly. You can instantiate
  instances of this class (with different parameters etc.) for each request,
  and then call methods on it. Guess how it looks in Camping?

      module App::Controllers
        class Posts
          def get; end
          def post; end
        end
      end

  The best part: Camping doesn&amp;#39;t care if you use GET, DELETE, PROPFIND or
  HELLOWORD; every method is threated equally. One of the early ideas of HTTP
  was that you could easily extend it with your own methods for your own
  needs, and Camping is a perfect match for these cases!
%%%%% end

reasons.push(RUBY) do %%
  Ruby has wonderful features such as classes, inheritance, modules and
  methods. Why should every single DSL replace these features by blocks?
  Often, all they do is to hide details, without improving anything else than
  line count. Let me show you an example:

      get &amp;#39;/posts&amp;#39; do
        # code
      end

  Now answer me:

  1. Where is this code stored?
  2. How do I override the code?
  3. What happens if I call `get &amp;#39;/posts&amp;#39;` again?

  Not quite sure? Let&amp;#39;s have a look at Camping:

      module App::Controllers
        class Posts
          def get
            # code
          end
        end
      end

  Since this is just &amp;quot;plain&amp;quot; Ruby, it&amp;#39;s much simpler:

  ### 1. Where is this code stored?

  The code is stored as a method, and we can easily play with it:

      Posts.instance_methods(false) # =&amp;gt; [:get]
      Posts.instance_method(:get)   # =&amp;gt; #&amp;lt;UnboundMethod: Posts#get&amp;gt;
      # Given post.is_a?(Posts)
      post.methods(false)           # =&amp;gt; [:get]
      post.method(:get)             # =&amp;gt; #&amp;lt;Method: Posts#get&amp;gt;

  ### 2. How do I override the code?

  Just like you would override a method:

      class App::Controllers::Posts
        def get
          # override
        end
      end

      # or, if post.is_a?(Posts)

      def post.get
        # override
      end

  ### 3. What happens if I call `class Posts` again?

  Because Ruby has open classes, we know that it would have no effect at all.

  ------------

  Another advantage of having resources as classes (and not as blocks):

      module IUseTheseMethodsALot
        def get; end
      end

      module App::Controllers
        class Posts
          include IUseTheseMethodsALot
        end

        class Users
          include IUseTheseMethodsALot
        end
      end
%%%%% end

reasons.push(NAMING) do %q%
  In Camping you&amp;#39;ll have to give every resource a name, while in Sinatra
  they&amp;#39;re always anonymous. By giving resources a name you have a way of
  referencing them, which can be very convenient:

      post &amp;#39;/issue&amp;#39; do
        issue = Issue.create(params[:issue])
        redirect &amp;quot;/issue/#{issue.id}/overview&amp;quot;
      end

  Since every resource is anonymous in Sinatra, you&amp;#39;re forced to hard-code
  the path. Not very elegant, and it can be a pain to update the code if you
  for instance want to move all urls from issue/ to i/. Camping&amp;#39;s solution:

      class Issue
        def post
          issue = Issue.create(@input.issue)
          redirect R(IssueOverview, issue)
        end
      end

  The R method in Ruby returns the URL to a resource (which takes one
  parameter). Camping automatically calls #to_param on the arguments, so you
  can safely pass in ActiveRecord objects too. If you want to change the
  route to IssueOverview, you can do this in *one* place and you&amp;#39;re done.
%%%%% end

reasons.push(RELOADING) do %%
      $ camping app.rb
      ** Starting Mongrel on 0.0.0.0:3301

  The Camping Server provides code reloading (so you don&amp;#39;t need to restart
  the server while you develop your app) that works out of the box on *all*
  platforms (including Windows). We actually care about our Windows users!
%%%%% end
                                                                        &amp;#39;&amp;#39;
                                                                        &amp;#39;&amp;#39;
BEGIN {def Object.const_missing(m);m.to_s end;def method_missing(*a)a[1]=
$h.pop if a[1]==$h;$h.push(a) end;$h = [];def reasons; $reas ||= {};end;&amp;#39;&amp;#39;
def reasons.push(r,&amp;amp;b);self[r]=b.call;end;END {puts h=$h*&amp;#39; &amp;#39;,&amp;#39;=&amp;#39;*h.size,&amp;#39;&amp;#39;
reasons.each { |name, val| puts name, &amp;#39;-&amp;#39;*name.size, val.gsub(/^  /,&amp;#39;&amp;#39;),&amp;#39;&amp;#39;
                                                                        &amp;#39;&amp;#39;
}}}  # Please keep all my mustaches intact.   // Magnus Holm&lt;/code&gt;&lt;/pre&gt;&lt;img src="http://feeds.feedburner.com/~r/MagnusHolm/~4/cxsiXXeEoms" height="1" width="1"&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>05275469297961036779</gr:likingUser><gr:likingUser>12739516975816816933</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/MagnusHolm"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/MagnusHolm</id><title type="html">The timeless repository</title><link rel="alternate" href="http://timeless.judofyr.net/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1296000981828"><id gr:original-id="http://www.rubyinside.com/?p=4227">tag:google.com,2005:reader/item/2ab9adb6574222c1</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><category term="Cool" scheme="http://www.rubyinside.com"/><category term="News" scheme="http://www.rubyinside.com"/><title type="html">Clever Algorithms: A Free Book of Nature-Inspired Ruby Recipes</title><published>2011-01-26T00:13:49Z</published><updated>2011-02-13T05:58:20Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/aJ1cgmODpTk/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/clever-algorithms-a-free-book-of-nature-inspired-ruby-recipes-4227.html" xml:lang="en" type="html">&lt;p&gt;&lt;a href="http://www.cleveralgorithms.com/"&gt;&lt;img src="http://www.rubyinside.com/wp-content/uploads/2011/01/cleveralgorithms.png" width="177" height="267" alt="cleveralgorithms.png" style="float:right;margin-bottom:12px;margin-left:12px;border:1px #000000 solid"&gt;&lt;/a&gt;&lt;a href="http://www.cleveralgorithms.com/"&gt;Clever Algorithms&lt;/a&gt; is a newly released book by Jason Brownlee PhD that describes 45 algorithms from the Artificial Intelligence (AI) field with Ruby-based examples. It's well produced and, notably, &lt;i&gt;free&lt;/i&gt; in its PDF and online formats. A print copy is available at a small cost.&lt;/p&gt;
&lt;p&gt;The book kicks off with a chapter of background regarding AI and its problem domains and moves on to an array of algorithms in the probabilistic, neural networking, stochastic, swarm, and evolutionary spaces.&lt;/p&gt;
&lt;p&gt;Ruby purists will note that even though the demonstrations are in Ruby, they're not very &lt;i&gt;Ruby like&lt;/i&gt;. Classes are rarely defined and using methods defined in the &lt;code&gt;main&lt;/code&gt; context as functions is the order of the day. Nonetheless, the book remains well written and interesting and the Ruby code - as generic as it is - will nonetheless help Rubyists get the idea behind many of the processes demonstrated.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This book provides a handbook of algorithmic recipes from the fields of Metaheuristics, Biologically Inspired Computation and Computational Intelligence that have been described in a complete, consistent, and centralized manner. These standardized descriptions were carefully designed to be accessible, usable, and understandable.&lt;/p&gt;
&lt;p&gt;Most of the algorithms described in this book were originally inspired by biological and natural systems, such as the adaptive capabilities of genetic evolution and the acquired immune system, and the foraging behaviors of birds, bees, ants and bacteria. An encyclopedic algorithm reference, this book is intended for research scientists, engineers, students, and interested amateurs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;cite&gt;Jason Brownlee&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;Check out Jason's book at &lt;a href="http://www.cleveralgorithms.com/"&gt;cleveralgorithms.com&lt;/a&gt; and the &lt;a href="https://github.com/jbrownlee/CleverAlgorithms"&gt;content and code are in this GitHub repository.&lt;/a&gt;&lt;/p&gt;
&lt;p style="padding:8px;background-color:#ff9"&gt;&lt;em&gt;[ad]&lt;/em&gt; &lt;a href="http://engine.adzerk.net/redirect/0/3128/2954/1313/fc6773af6f384b7186b7ca87733e02fd/19/24/3400/634312088369843266"&gt;Jaconda&lt;/a&gt; is a chat system designed for teams working on projects. It works from the browser, your IM app, or your phone, and lets you chat, share files, and keep up with tickets and project activity you can have sent automatically to your rooms.&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=aJ1cgmODpTk:beNsNUsHPq0:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=aJ1cgmODpTk:beNsNUsHPq0:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=aJ1cgmODpTk:beNsNUsHPq0:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/aJ1cgmODpTk" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>02955686121905988538</gr:likingUser><gr:likingUser>17767811246110718090</gr:likingUser><gr:likingUser>00983790994293744482</gr:likingUser><gr:likingUser>17267561484850801618</gr:likingUser><gr:likingUser>00655242585945262244</gr:likingUser><gr:likingUser>14508535314649680529</gr:likingUser><gr:likingUser>16067110809823480656</gr:likingUser><gr:likingUser>07870146926958072805</gr:likingUser><gr:likingUser>15638623306692727372</gr:likingUser><gr:likingUser>08962340293270249083</gr:likingUser><gr:likingUser>03647909449507125994</gr:likingUser><gr:likingUser>04828842218541785042</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>07699240974340315355</gr:likingUser><gr:likingUser>00053104979490566885</gr:likingUser><gr:likingUser>05272376215565670505</gr:likingUser><gr:likingUser>10868561950768813169</gr:likingUser><gr:likingUser>02312042911823059098</gr:likingUser><gr:likingUser>11496849258748853027</gr:likingUser><gr:likingUser>06808395769643365537</gr:likingUser><gr:likingUser>11827983218694997518</gr:likingUser><gr:likingUser>17838902486070354043</gr:likingUser><gr:likingUser>05351348778449756836</gr:likingUser><gr:likingUser>14142161122852127123</gr:likingUser><gr:likingUser>13278723434297751093</gr:likingUser><gr:likingUser>14780213955601263738</gr:likingUser><gr:likingUser>04947588929828696569</gr:likingUser><gr:likingUser>01642209201483437263</gr:likingUser><gr:likingUser>05370333769261935271</gr:likingUser><gr:likingUser>02471903306039536256</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1295883069186"><id gr:original-id="http://antirez.com/post/223">tag:google.com,2005:reader/item/49e222c75e2d504d</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><title type="html">About the new INFO command, Diskstore and Cluster ETA</title><published>2011-01-24T15:15:15Z</published><updated>2011-01-24T15:15:15Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/antirez/~3/d5G5U_wVL9I/new-info-diskstore-cluster-eta.html" type="text/html"/><summary xml:base="http://antirez.com/" type="html">&lt;div&gt;&lt;div style="clear:both"&gt;&lt;/div&gt;&lt;div&gt;With this blog post I'll try to keep you posted on the progresses of Redis, the recent changes to the INFO output, and the ETA for diskstore and cluster.
&lt;br&gt;&lt;br&gt;

&lt;h3&gt;New INFO output&lt;/h3&gt;
During the week end I managed to improve the INFO output that was rapidly becoming a mess ;)
INFO is a very interesting command for Redis users, but there are a few issues that need to be addressed:
&lt;br&gt;&lt;br&gt;

&lt;ul&gt;&lt;li&gt;Too much output., not separated by section. This has many drawbacks: complex to read for humans. Time consuming to generate as it can take more than a millisecond sometime, for some Redis uses this is not ideal.&lt;/li&gt;

&lt;li&gt;Collisions between the roles of INFO and CONFIG GET.&lt;/li&gt;

&lt;li&gt;More information needed, sometimes even super verbose. Things that we don't like to show in the default INFO output.&lt;/li&gt;

&lt;/ul&gt;
To address these problems what I did was:
&lt;br&gt;&lt;br&gt;

&lt;ul&gt;&lt;li&gt;Now the INFO output is divided into sections, even from the point of view of human eyes.&lt;/li&gt;

&lt;li&gt;It is possible to ask for a specific section, passing one argument to INFO. Example: &lt;b&gt;INFO memory&lt;/b&gt; will only show information about a single section of the output.&lt;/li&gt;

&lt;li&gt;For default INFO will output only default sections, like if you called &lt;b&gt;INFO default&lt;/b&gt;. Instead &lt;b&gt;INFO all&lt;/b&gt; will output everything. So now it is possible to add a few very verbose sections that simply are not printed by default, but are printed if the INFO argument is &lt;b&gt;all&lt;/b&gt; or when the specific question is requested explicitly. On crashes or failed asserts all the sections are included in the stack trace.&lt;/li&gt;

&lt;/ul&gt;
&lt;br&gt;&lt;br&gt;

All this will NOT be merged into 2.2, but is already part of Redis unstable.
&lt;br&gt;&lt;br&gt;

An example of the new output:
&lt;br&gt;&lt;br&gt;

&lt;pre&gt;
redis&amp;gt; info
# Server
redis_version:2.3.0
redis_git_sha1:9b45592c
redis_git_dirty:1
arch_bits:64
multiplexing_api:kqueue
process_id:17790
tcp_port:6379
uptime_in_seconds:1012
uptime_in_days:0
lru_clock:1661879&lt;br&gt;&lt;br&gt;# Clients
connected_clients:1
client_longest_output_list:0
client_biggest_input_buf:0
blocked_clients:0&lt;br&gt;&lt;br&gt;# Memory
used_memory:931360
used_memory_human:909.12K
used_memory_rss:1085440
mem_fragmentation_ratio:1.17
use_tcmalloc:0&lt;br&gt;&lt;br&gt;... more sections ...&lt;br&gt;&lt;br&gt;&lt;/pre&gt;
&lt;br&gt;&lt;br&gt;

It is possible to ask for specific sections. The following output shows one of the most interesting new sections:
&lt;br&gt;&lt;br&gt;

&lt;pre&gt;
redis&amp;gt; info commandstats
# Commandstats
cmdstat_get:calls=10019,usec=62234,usec_per_call=6.21
cmdstat_set:calls=10049,usec=83995,usec_per_call=8.36
cmdstat_incr:calls=10029,usec=80895,usec_per_call=8.07
cmdstat_lpush:calls=20091,usec=138814,usec_per_call=6.91
cmdstat_lpop:calls=10023,usec=69270,usec_per_call=6.91
cmdstat_lrange:calls=40126,usec=2607061,usec_per_call=64.97
cmdstat_sadd:calls=10048,usec=68385,usec_per_call=6.81
cmdstat_spop:calls=10009,usec=59072,usec_per_call=5.90
cmdstat_mset:calls=10049,usec=128621,usec_per_call=12.80
cmdstat_ping:calls=20053,usec=98911,usec_per_call=4.93
cmdstat_info:calls=3,usec=598,usec_per_call=199.33
&lt;/pre&gt;
&lt;br&gt;&lt;br&gt;

(against my MBA 11&amp;quot;, so typical servers will have smaller values)
&lt;br&gt;&lt;br&gt;

I hope this will help us debugging better user problems, as for instance big set intersections or calls to KEYS will be easily detected. Note that in fast computers the 1 microsecond resolution provided by gettimeofday() may not be enough, but it&amp;#39;s not a big problem, this is our equivalent of the MySQL &amp;quot;slow log&amp;quot;. As long as slow operations are logged, this is fine. For all the rest there is the count of calls that is good to understand what fast operations are stressing the server.
&lt;br&gt;&lt;br&gt;

As you can see the new format is almost backward compatible with the old one. There is just to handle empty lines and to filter lines starting with &amp;quot;#&amp;quot;, that are now considered comments.
&lt;h3&gt;Diskstore and Cluster ETA&lt;/h3&gt;
At the end of 2010 I was actively hacking again on Redis Cluster almost full time.
Now the project is a bit delayed to be more aggressive developing diskstore brach.
&lt;br&gt;&lt;br&gt;

Why, you may ask?
&lt;br&gt;&lt;br&gt;

Because our logic was as follow:
&lt;br&gt;&lt;br&gt;

&lt;ul&gt;&lt;li&gt;Great implementation of in memory single instance&lt;/li&gt;

&lt;li&gt;Decent option for datasets bigger than RAM in single instance&lt;/li&gt;

&lt;li&gt;Good cluster support, now that the single node works well&lt;/li&gt;

&lt;/ul&gt;
&lt;br&gt;&lt;br&gt;

Then we discovered that &lt;a href="http://antirez.com/post/diskstore-btree-implementation.html"&gt;the Virtual Memory implementation is not as good as we want it to be&lt;/a&gt;. So I started working at diskstore, that is a much simpler project, already in alpha stage and working, in a public repository.
&lt;br&gt;&lt;br&gt;

In a few weeks I'll start against with Redis Cluster, that will be Redis 3.0, while Redis 2.4 will provide a stable implementation of Diskstore.
&lt;br&gt;&lt;br&gt;

In the meamtime Pieter Noordhuis is doing a awesome work in the area of client libraries. We were focusing too much on the server side, but clients are also a very important part, and a few clients can really benefit from some serious optimization Pieter is working on.
&lt;br&gt;&lt;br&gt;

A final note. It's almost one year at this point that I and Pieter are working at Redis thanks to VMware. I want to say thank you to this awesome company that made all you saw about Redis in the latest year possible.
&lt;br&gt;&lt;br&gt;

&lt;b&gt;Edit:&lt;/b&gt; so what's the ETA? More or less 2 months for beta quality (RC) diskstore, and at least six months for beta quality cluster. This are a bit optimistic forecasts, but after all in a few weeks we'll not have to work too much at 2.2 as it will ship stable, so there will be more time for the unstable branches.&lt;/div&gt;&lt;div&gt;&lt;div&gt;post read 6724 times&lt;sup&gt;&lt;a href="http://antirez.com/page/uniquevisitors"&gt;*&lt;/a&gt;&lt;/sup&gt; (average 126.4 visits/day)&lt;/div&gt;Posted at 15:15:15 &lt;a href="http://antirez.com/post/new-info-diskstore-cluster-eta.html"&gt;permalink&lt;/a&gt; | &lt;a href="http://antirez.com/post/new-info-diskstore-cluster-eta.html"&gt;4 comments&lt;/a&gt; | &lt;a href="http://antirez.com/print.php?postid=223"&gt;print&lt;/a&gt; | &lt;a href="http://postli.com/post?t=About+the+new+INFO+command%2C+Diskstore+and+Cluster+ETA&amp;amp;u=http%3A%2F%2Fantirez.com%2Fpost%2Fnew-info-diskstore-cluster-eta.html"&gt;post it&lt;/a&gt; | &lt;a href="http://technorati.com/search/http://antirez.com/post/new-info-diskstore-cluster-eta.html"&gt;View blog reactions&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/antirez/~4/d5G5U_wVL9I" height="1" width="1"&gt;</summary><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>06244526826240331725</gr:likingUser><gr:likingUser>02821366625847833745</gr:likingUser><source gr:stream-id="feed/http://antirez.com/rss"><id>tag:google.com,2005:reader/feed/http://antirez.com/rss</id><title type="html">antirez weblog</title><link rel="alternate" href="http://antirez.com" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1295806455505"><id gr:original-id="tag:timeless.judofyr.net,2010-01-23:1264255523">tag:google.com,2005:reader/item/c475f8c628b5e090</id><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><title type="html">Haters gonna HATEOAS</title><published>2010-01-23T14:05:23Z</published><updated>2010-01-23T14:05:23Z</updated><link rel="alternate" href="http://timeless.judofyr.net/haters-gonna-hateoas" type="text/html"/><content xml:base="http://timeless.judofyr.net/" type="html">&lt;p&gt;Every time someone mentions RESTful web services, there’s always that one person that has to chime in: “That’s not &lt;em&gt;really&lt;/em&gt; RESTful, it’s just kinda RESTful.” I’d always filed that information away, under ‘things to learn later,’ and let it simmer in the back of my brain. I’ve finally looked into it, and they’re absolutely right: 99.99% of the RESTful APIs out there aren’t fully compliant with Roy Fielding’s conception of REST. Is that bad?&lt;/p&gt;

&lt;p&gt;Before we answer that question, let’s back up a bit: Why aren’t these web services RESTful? Just what is REST, anyway? REST was created by Roy Fielding in &lt;a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm"&gt;his dissertation&lt;/a&gt; if you’d like the full lowdown, but we’re more concerned with RESTful API design than we are in the full system. A more useful framework for this discussion is the &lt;a href="http://martinfowler.com/articles/richardsonMaturityModel.html"&gt;Richardson Maturity Model&lt;/a&gt;. Basically, it defines four possible levels of ‘REST support’:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;“The Swamp of POX.” You’re using HTTP to make RPC calls. HTTP is only really used as a tunnel.&lt;/li&gt;

&lt;li&gt;Resources. Rather than making every call to a service endpoint, you have multiple endpoints that are used to represent resources, and you’re talking to them. This is the very beginnings of supporting REST.&lt;/li&gt;

&lt;li&gt;HTTP Verbs. This is the level that something like Rails gives you out of the box: You interact with these Resources using HTTP verbs, rather than always using POST.&lt;/li&gt;

&lt;li&gt;Hypermedia Controls. HATEOAS. You’re 100% REST compliant.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;The four levels of REST&lt;/h2&gt;

&lt;p&gt;Let’s start at the bottom and work our way up.&lt;/p&gt;

&lt;p&gt;Now, The Swamp of POX means that you’re using HTTP. Technically, REST services can be provided over any application layer protocol as long as they conform to certain properties. In practice, basically everyone uses HTTP. And since we’re discussing the creation of an API that conforms to REST rather than a system architecture based on the principles of REST, HTTP is a solid assumption on our part.&lt;/p&gt;

&lt;p&gt;Level one is where it starts to get interesting. REST’s ‘resources’ are the core pieces of data that your application acts on. These will often correspond to the Models in your application, if you’re following MVC. A blog, for example, would have Entry resources and Comment resources. API design at Level 1 is all about using different URLs to interact with the different resources in your application. To make a new Entry, you’d use &lt;code&gt;/entries/make_new&lt;/code&gt;, but with comments, it’d be &lt;code&gt;/comments/make_new&lt;/code&gt;. So far, so good. This stuff is easy.&lt;/p&gt;

&lt;p&gt;However, there are a set of common operations that are performed on resources, and it seems kinda silly to make a new URI for every operation, especially when they’re shared. That’s where Level 2 comes in. We’re always going to need to perform CRUD operations on our resources, so why not find a way to share these operations across resources? We accomplish this using HTTP Verbs. If we want to get a list of Entries, we make a GET request to &lt;code&gt;/entries&lt;/code&gt;, but if we want to create a new Entry, we &lt;code&gt;POST&lt;/code&gt; rather than GET. Pretty simple.&lt;/p&gt;

&lt;p&gt;The final level, Hypermedia Controls, is the one that everyone falls down on. There’s two parts to this: content negotiation and HATEOAS. Content negotiation is focused on different representations of a particular resource, and HATEOAS is about the discoverability of actions on a resource.&lt;/p&gt;

&lt;h2&gt;Content Negotiation&lt;/h2&gt;

&lt;p&gt;At its simplest, this is something that Rails does right, too. Check out these lines from running &lt;code&gt;rails scaffold&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;def&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;
  &lt;span&gt;&lt;span&gt;@&lt;/span&gt;entries&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Entry&lt;/span&gt;.&lt;span&gt;all&lt;/span&gt;
  respond_to &lt;span&gt;do &lt;/span&gt;|&lt;span&gt;format&lt;/span&gt;|
    format.&lt;span&gt;html&lt;/span&gt;
    format.&lt;span&gt;xml&lt;/span&gt; { render &lt;span&gt;&lt;span&gt;:&lt;/span&gt;xml&lt;/span&gt; =&amp;gt; &lt;span&gt;&lt;span&gt;@&lt;/span&gt;entries&lt;/span&gt; }
    format.&lt;span&gt;json&lt;/span&gt; { render &lt;span&gt;&lt;span&gt;:&lt;/span&gt;json&lt;/span&gt; =&amp;gt; &lt;span&gt;&lt;span&gt;@&lt;/span&gt;entries&lt;/span&gt; }
  &lt;span&gt;end&lt;/span&gt;
&lt;span&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is content negotiation. You’re able to use MIME types to request a representation of a resource in different formats. Rails 3 has made this even better, with &lt;code&gt;respond_to&lt;/code&gt;/&lt;code&gt;respond_with&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code lang="ruby"&gt;&lt;span&gt;class&lt;/span&gt; &lt;span&gt;EntriesController&lt;span&gt; &lt;span&gt;&amp;lt;&lt;/span&gt; ApplicationController::Base&lt;/span&gt;&lt;/span&gt;

  respond_to &lt;span&gt;&lt;span&gt;:&lt;/span&gt;html&lt;/span&gt;, &lt;span&gt;&lt;span&gt;:&lt;/span&gt;xml&lt;/span&gt;, &lt;span&gt;&lt;span&gt;:&lt;/span&gt;json&lt;/span&gt;

  &lt;span&gt;def&lt;/span&gt; &lt;span&gt;index&lt;/span&gt;
    &lt;span&gt;respond_with&lt;/span&gt;(&lt;span&gt;&lt;span&gt;@&lt;/span&gt;entries&lt;/span&gt; &lt;span&gt;=&lt;/span&gt; &lt;span&gt;Entry&lt;/span&gt;.&lt;span&gt;all&lt;/span&gt;)
  &lt;span&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Super simple. So why do I say people get this wrong? Well, this is a great usage of content negotiation, but there’s also one that almost everyone gets wrong. Content negotiation is the answer to the question, “How do I version my API?” The proper way to do this is with the &lt;code&gt;Accepts&lt;/code&gt; header, and use a MIME type like &lt;code&gt;application/yourcompany.v1+json&lt;/code&gt;. There’s a great article about this by Peter Williams &lt;a href="http://barelyenough.org/blog/2008/05/versioning-rest-web-services/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;HATEOAS&lt;/h2&gt;

&lt;p&gt;The last constraint is incredibly simple, but nobody actually does it. It’s named Hypertext As The Engine Of Application State. I still haven’t decided how to pronounce the acronym, I always try to say “Hate ee ohs,” which sounds like a breakfast cereal. Anyway, let’s break this down. We’re using Hypertext, fine, that makes sense. But what’s it mean to be an engine? And application state?&lt;/p&gt;

&lt;p&gt;It’s all about state transitions. It’s right there in the name: Representational State Transfer. Your application is just a big state machine.&lt;/p&gt;

&lt;p&gt;&lt;img src="http://i.imgur.com/9E28g.gif" alt="fsm"&gt;&lt;/p&gt;

&lt;p&gt;Your APIs should do this. There should be a single endpoint for the resource, and all of the other actions you’d need to undertake should be able to be discovered by inspecting that resource. Here’s an example of what our &lt;code&gt;Entry&lt;/code&gt; XML might look like if Rails handled HATEOAS:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;entry&amp;gt;
  &amp;lt;id&amp;gt;1337&amp;lt;/id&amp;gt;
  &amp;lt;author&amp;gt;Steve Klabnik&amp;lt;/author&amp;gt;
  &amp;lt;link rel = &amp;quot;/linkrels/entry/newcomment&amp;quot;
        uri = &amp;quot;/entries/1337/comments&amp;quot; /&amp;gt;
  &amp;lt;link rel = &amp;quot;self&amp;quot;
        uri = &amp;quot;/entries/1337&amp;quot; /&amp;gt;
&amp;lt;/entry&amp;gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we GET a particular Entry, we discover where we can go next: we can make a new comment. It’s a discoverable action. The particular state we’re in shows what other states we can reach from here.&lt;/p&gt;

&lt;p&gt;Now, when I said ‘nobody’ does this, what I meant was ‘for APIs.’ This is exactly how the Web works. Think about it. You start off on the homepage. That’s the only URL you have to know. From there, a bunch of links point you towards each state that you can reach from there. People would consider it ludicrous if they had to remember a dozen URLs to navigate a website, so why do we expect the consumers of our APIs to do so as well?&lt;/p&gt;

&lt;p&gt;There’s another benefit here as well: we’ve decoupled the URL itself from the action we’re having it perform. Think about it like the web: If we have a link that says “click here to make a new blog entry” and next week, we change it from &lt;code&gt;/entries/new&lt;/code&gt; to &lt;code&gt;/somethingelse/whatever&lt;/code&gt;, users of the web site (probably) won’t notice: they’re just clicking on the link that takes them where they need to go. If you changed the text to “click here to do something else” they wouldn’t expect it to be making an Entry anymore. By the same token, we can change the URI in our &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag, and a proper client will just automatically follow along. Brilliant!&lt;/p&gt;

&lt;h2&gt;Why aren’t we doing this already?&lt;/h2&gt;

&lt;p&gt;Well, for one thing, the tooling just isn’t there to do this. Think of how web development was before Rails started emphasizing REST: some people got it right, but not many people cared. I know that I had teachers telling me that a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; with &lt;code&gt;method=&amp;quot;GET&amp;quot;&lt;/code&gt; was perfectly fine, and that the only real difference between &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; is if the parameters are in the URL… but I digress. Until we make this kind of development easy to do, people aren’t going to do it. There’s also a serious lack of education on this topic. The web development community has been steadily improving as the web grows and matures, and so I hope that eventually we’ll see more people actually adopting HATEOAS and going ‘full RESTful.’&lt;/p&gt;

&lt;p&gt;There’s also some discussion about how useful extra constraints actually are. If this is such a big important deal, why aren’t more people doing it? I haven’t yet implemented a 100% RESTful API myself yet, so I can’t really say. I do believe that I’ll be giving it a shot in the future, and I think that as our collective understanding of Fielding’s work improves, we’ll eventually see the value in REST.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/MagnusHolm/~4/0TTCctAVRns" height="1" width="1"&gt;</content><author gr:unknown-author="true"><name>(author unknown)</name></author><gr:likingUser>05275469297961036779</gr:likingUser><gr:likingUser>08854659178715462472</gr:likingUser><gr:likingUser>02428719105696136930</gr:likingUser><gr:likingUser>01158114289556449363</gr:likingUser><source gr:stream-id="feed/http://feeds.feedburner.com/MagnusHolm"><id>tag:google.com,2005:reader/feed/http://feeds.feedburner.com/MagnusHolm</id><title type="html">The timeless repository</title><link rel="alternate" href="http://timeless.judofyr.net/" type="text/html"/></source></entry><entry gr:is-read-state-locked="true" gr:crawl-timestamp-msec="1295641215225"><id gr:original-id="http://www.rubyinside.com/?p=4214">tag:google.com,2005:reader/item/f65c838ec73fcc69</id><category term="user/05185BEEF/label/Dev | Ruby" scheme="http://www.google.com/reader/" label="Dev | Ruby"/><category term="user/05185BEEF/state/com.google/reading-list" scheme="http://www.google.com/reader/" label="reading-list"/><category term="user/05185BEEF/state/com.google/read" scheme="http://www.google.com/reader/" label="read"/><category term="Linux Specific" scheme="http://www.rubyinside.com"/><category term="Tools" scheme="http://www.rubyinside.com"/><title type="html">Rails Ready: Ruby and Rails on Ubuntu in One Line</title><published>2011-01-21T20:20:06Z</published><updated>2011-01-26T23:00:46Z</updated><link rel="alternate" href="http://feedproxy.google.com/~r/RubyInside/~3/EaxgwBVjQx8/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html#comments" type="text/html"/><link rel="replies" href="http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html/feed/atom" type="application/atom+xml"/><content xml:base="http://www.rubyinside.com/rails-ready-ruby-and-rails-on-ubuntu-in-one-line-4214.html" xml:lang="en" type="html">&lt;blockquote&gt;&lt;p&gt;How would you like to get a full Ruby on Rails stack up on Ubuntu with one command?&lt;/p&gt;
&lt;p&gt;Now you can by running &lt;a href="https://github.com/joshfng/railsready"&gt;Rails Ready.&lt;/a&gt; Rails Ready is a setup script that gets Ruby and Rails running on a fresh install of Ubuntu with one command (Tested on Ubuntu server 10.04 LTS (Long-term Support)).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;cite&gt;Adam Stacoviak&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/joshfng/railsready"&gt;Rails Ready&lt;/a&gt; is essentially just a shell script but one you might find useful if you're running Ubuntu (or - update - CentOS) and want to get the installation process done and over as quickly as possible. It follows on rather nicely to our last post: &lt;a href="http://www.rubyinside.com/rails-installer-ruby-and-rails-on-windows-in-a-single-install-4201.html"&gt;Ruby Installer: Ruby and Rails on Windows in a Single, Easy Install&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;If you have the time or you're installing this on your main development machine, however, I would recommend following &lt;a href="http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you"&gt;Ryan Biggs' RVM based instructions&lt;/a&gt; (or &lt;a href="http://www.rubyinside.com/how-to-install-ruby-1-9-2-and-rails-3-0-on-ubuntu-10-10-4148.html"&gt;my equivalent screencast&lt;/a&gt;) because RVM gives you more developer-level control later on (such as &lt;a href="http://rvm.beginrescueend.com/gemsets/"&gt;gem sets&lt;/a&gt;). &lt;em&gt;&lt;strong&gt;UPDATE -&lt;/strong&gt; Josh has been working hard and says that Rails Ready "now asks you if you want to build from source or install RVM" - nice!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Nonetheless, if you want to get a new Ubuntu (or CentOS) box running Rails as quickly as possible, Rails Ready is worth a try. The short version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget --no-check-certificate https://github.com/joshfng/railsready/raw/master/railsready.sh &amp;amp;&amp;amp; bash railsready.sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before running the above, though, be aware of the ramifications. You should probably take a look at &lt;code&gt;https://github.com/joshfng/railsready/raw/master/railsready.sh&lt;/code&gt; yourself to see if it's suitable for you.&lt;/p&gt;
&lt;div&gt;
&lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=EaxgwBVjQx8:IbN2hxO1E3A:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?d=qj6IDK7rITs" border="0"&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/RubyInside?a=EaxgwBVjQx8:IbN2hxO1E3A:3H-1DwQop_U"&gt;&lt;img src="http://feeds.feedburner.com/~ff/RubyInside?i=EaxgwBVjQx8:IbN2hxO1E3A:3H-1DwQop_U" border="0"&gt;&lt;/a&gt;
&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/RubyInside/~4/EaxgwBVjQx8" height="1" width="1"&gt;</content><author><name>Peter Cooper</name></author><gr:likingUser>00983790994293744482</gr:likingUser><gr:likingUser>01371570141234954600</gr:likingUser><gr:likingUser>15998619181294633317</gr:likingUser><gr:likingUser>18253276447546087020</gr:likingUser><gr:likingUser>12445051381135499126</gr:likingUser><gr:likingUser>03022308088960936241</gr:likingUser><gr:likingUser>03730916351303545880</gr:likingUser><gr:likingUser>14142161122852127123</gr:likingUser><gr:likingUser>14308864270778157202</gr:likingUser><gr:likingUser>05896016890297028843</gr:likingUser><gr:likingUser>15398205570777958235</gr:likingUser><source gr:stream-id="feed/http://www.rubyinside.com/feed/"><id>tag:google.com,2005:reader/feed/http://www.rubyinside.com/feed/</id><title type="html">Ruby Inside</title><link rel="alternate" href="http://www.rubyinside.com/" type="text/html"/></source></entry></feed>
